#from regex import E
from imports import *



bot = Bot(token=config.token, disable_web_page_preview=True)
dp = Dispatcher(bot)

async def info_donate_callback(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(f'–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>–ø–æ–ø–æ–ª–Ω–∏—Ç—å</code> <i>(—Å—É–º–º–∞)</i>', parse_mode='html')


async def check_pays_callback(callback: types.CallbackQuery):
    bill_id = str(callback.data[10:])
    info = await get_check(bill_id)

    if info == False:
        return callback.answer(f'–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    else:
        pass

    if str(p2p.check(bill_id=bill_id).status) == 'PAID':
        users_money = await user_money(callback.from_user.id)
        donate = int(info[1])

        x2donate_status = await status_x2donate()

        if x2donate_status == 'on':
            await update_money(callback.from_user.id, users_money + donate * 2)
            await delete_check(bill_id)
            await callback.message.answer(f'‚úÖ <b>{callback.from_user.full_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å–≤–æ–π —Å—á—ë—Ç –∏ –ø–æ–ª—É—á–∏–ª–∏ {donate * 2} —Ä—É–±.</b> <i>üéóX2 –î–æ–Ω–∞—Ç</i>', parse_mode='html')
            return
        else:
            pass
        await update_money(callback.from_user.id, users_money + donate)
        await delete_check(bill_id)
        await callback.message.answer(f'‚úÖ <b>{callback.from_user.full_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å–≤–æ–π —Å—á—ë—Ç –∏ –ø–æ–ª—É—á–∏–ª–∏ {donate} —Ä—É–±.</b>', parse_mode='html')
    else:
        await callback.message.answer('–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á—ë—Ç', reply_markup=pay(False, bill=bill_id))


async def pay_money3_callback(callback: types.CallbackQuery):
    times = float(callback.data[11:])

    last_time = f"{int(times)}"
    sec_time = time.time() - float(last_time)

    period = 60
    if sec_time >= period:
        await callback.message.delete()
        return await callback.message.answer(f'‚è∞ {callback.from_user.full_name} –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç—ë–∫. –ö–Ω–æ–ø–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞')
    else:
        pass

    money_pay = await course_money3()
    cash_money_pay = await course_cash_money3()

    users_money = await user_money(callback.from_user.id)

    if users_money < cash_money_pay:
        return await callback.answer('‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤')
    else:
        pass
    
    users_balance = await user_balance(callback.from_user.id)

    await update_money(callback.from_user.id, users_money - cash_money_pay)
    await update_balance(callback.from_user.id, users_balance + money_pay)
    full_summ = await utils.scor_summ(money_pay)
    await callback.message.answer(f'üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ <b>{full_summ}</b>', parse_mode='html')





async def pay_money1_callback(callback: types.CallbackQuery):
    times = float(callback.data[11:])

    last_time = f"{int(times)}"
    sec_time = time.time() - float(last_time)

    period = 60
    if sec_time >= period:
        await callback.message.delete()
        return await callback.message.answer(f'‚è∞ {callback.from_user.full_name} –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç—ë–∫. –ö–Ω–æ–ø–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞')
    else:
        pass

    money_pay = await course_money1()
    cash_money_pay = await course_cash_money1()

    users_money = await user_money(callback.from_user.id)

    if users_money < cash_money_pay:
        return await callback.answer('‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤')
    else:
        pass
    
    users_balance = await user_balance(callback.from_user.id)

    await update_money(callback.from_user.id, users_money - cash_money_pay)
    await update_balance(callback.from_user.id, users_balance + money_pay)
    full_summ = await utils.scor_summ(money_pay)
    await callback.message.answer(f'üéâ {name} –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ <b>{full_summ}</b>', parse_mode='html')




async def pay_money2_callback(callback: types.CallbackQuery):
    times = float(callback.data[11:])

    last_time = f"{int(times)}"
    sec_time = time.time() - float(last_time)

    period = 60
    if sec_time >= period:
        await callback.message.delete()
        return await callback.message.answer(f'‚è∞ {callback.from_user.full_name} –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç—ë–∫. –ö–Ω–æ–ø–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞')
    else:
        pass

    money_pay = await course_money2()
    cash_money_pay = await course_cash_money2()

    users_money = await user_money(callback.from_user.id)

    if users_money < cash_money_pay:
        return await callback.answer('‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤')
    else:
        pass
    
    users_balance = await user_balance(callback.from_user.id)

    await update_money(callback.from_user.id, users_money - cash_money_pay)
    await update_balance(callback.from_user.id, users_balance + money_pay)
    full_summ = await utils.scor_summ(money_pay)
    await callback.message.answer(f'üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ <b>{full_summ}</b>', parse_mode='html')




async def priglashenie_callback(call: types.CallbackQuery):

   user1, user2, name_family = call.data.replace('accept_', '', 1).split(':')
   print(call.from_user.id, user1)
   
   if int(call.from_user.id) == int(user1):
      pass
   else:
      return await call.answer('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –¥–ª—è —Ç–µ–±—è ‚ùóÔ∏è')

   user_id = call.from_user.id
   user_name = cursor.execute("SELECT user_name from users where user_id = ?",(call.from_user.id,)).fetchone()
   user_name = str(user_name[0])

   all_family = cursor.execute(f'SELECT owner_id from family').fetchall()
   all_family2 = []
   
   for all_owner_id in all_family:
      all_family2.append(all_owner_id[0])

   if user_id in all_family2:
      return await call.message.answer(f'‚ùóÔ∏è–£ –≤–∞—Å –µ—Å—Ç—å <b>—Å–≤–æ—è —Å–µ–º—å—è.</b> –ó–∞—á–µ–º –≤–∞–º –µ—â—ë –æ–¥–Ω–∞? | <code>–†–∞—Å–ø—É—Å—Ç–∏—Ç—å —Å–µ–º—å—é</code> - —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ–º—å–∏ ', parse_mode='html')
   else:
      pass

   user_id_family = cursor.execute(f'SELECT user_id from user_family where user_id = {user_id}').fetchone()

   if user_id_family != None:
      return await call.message.answer('‚ùóÔ∏è –í—ã —É–∂–µ <b>—Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ</b> | –Ω–∞–ø–∏—à–∏—Ç–µ ¬´<code>–≤—ã–π—Ç–∏ —Å —Å–µ–º—å–∏</code>¬ª - –¥–ª—è –≤—ã—Ö–æ–¥–∞ —Å –≤–∞—à–µ–π —Å–µ–º—å–∏',parse_mode='html')
   else:
      pass

   text = f'''
‚úÖ <a href='tg://user?id={user1}'>{user2}</a>, –≤—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ–º—å—é ¬´<b>{name_family}</b>¬ª. –í—ã —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ
   '''

   text2 = f'''
‚ùóÔ∏è –í –≤–∞—à—É —Å–µ–º—å—é ¬´<b>{name_family}</b>¬ª –≤—Å—Ç—É–ø–∏–ª <a href='tg://user?id={user1}'>{user2}</a>
   '''
   owner_id_family = cursor.execute(f"SELECT owner_id from family where name = \"{name_family}\"").fetchone()
   owner_id_family = owner_id_family[0]

   cursor.execute("INSERT INTO user_family VALUES(?, ?, ?, ?);",(user2, user1, name_family, 1))
   await call.message.bot.send_message(owner_id_family, text2, parse_mode='html')
   await call.message.answer(text, parse_mode='html')


async def organiz_callback(callback: types.CallbackQuery):
       user_id = callback.from_user.id
       user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
       user_name = str(user_name[0])

       text = f'''
<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≤—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ üè∞

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <code>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–º—å—è—Ö</code> <b>- –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å–µ–º—å–µ–π</b>
       '''
       
       await callback.message.edit_text(text,reply_markup=help_back, parse_mode='html')









async def top_f_callback(callback: types.CallbackQuery):
       user_id = callback.from_user.id
       user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
       user_name = str(user_name[0])

       list = cursor.execute(f"SELECT * FROM family ORDER BY balance DESC").fetchmany(10)
       top_list = []

       num = 0

       for user in list:

          num += 1

          if num == 1:
             num2 = '1Ô∏è‚É£'
             num3 = ' <b>üéØ–¢–û–ü 1üéØ</b> |'
          if num == 2:
             num2 = '2Ô∏è‚É£'
             num3 = ''
          if num == 3:
             num2 = '3Ô∏è‚É£'
             num3 = ''
          if num == 4:
             num2 = '4Ô∏è‚É£'
             num3 = ''
          if num == 5:
             num2 = '5Ô∏è‚É£'
             num3 = ''
          if num == 6:
             num2 = '6Ô∏è‚É£'
             num3 = ''
          if num == 7:
             num2 = '7Ô∏è‚É£'
             num3 = ''
          if num == 8:
             num2 = '8Ô∏è‚É£'
             num3 = ''
          if num == 9:
             num2 = '9Ô∏è‚É£'
             num3 = ''
          if num == 10:
             num2 = 'üîü'
             num3 = ''
          
          balance = '{:,}'.format(user[4]).replace(',','.')
          
          if user[1] == config.owner_id:
            pass
          else:
            text = f'{num2} {user[0]} |{num3} üîé ID: <code>{user[3]}</code> | {balance} —Å. –º–æ–Ω–µ—Ç'

          top_list.append(text)  


       if top_list == ['']:
         top_f = '\n    ‚ùóÔ∏è <b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç—É –Ω–∏ –æ–¥–Ω–æ–π —Å–µ–º—å–∏</b>'
       else:
         top_f = '\n'.join(top_list)

       await callback.message.answer( f"<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç —Ç–æ–ø 10 —Å–µ–º—å–µ–π –≤ ¬´<b>{config.full_bot_name}</b>¬ª:\n" + top_f, parse_mode='html')


async def top_–∞_callback(callback: types.CallbackQuery):
       user_id = callback.from_user.id
       user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
       user_name = str(user_name[0])

       list = cursor.execute(f"SELECT * FROM users ORDER BY game DESC").fetchmany(10)
       top_list = []

       num = 0

       for user in list:

          num += 1

          if num == 1:
             num2 = '1Ô∏è‚É£'
             num3 = ' <b>üéØ–¢–û–ü 1üéØ</b> |'
          if num == 2:
             num2 = '2Ô∏è‚É£'
             num3 = ''
          if num == 3:
             num2 = '3Ô∏è‚É£'
             num3 = ''
          if num == 4:
             num2 = '4Ô∏è‚É£'
             num3 = ''
          if num == 5:
             num2 = '5Ô∏è‚É£'
             num3 = ''
          if num == 6:
             num2 = '6Ô∏è‚É£'
             num3 = ''
          if num == 7:
             num2 = '7Ô∏è‚É£'
             num3 = ''
          if num == 8:
             num2 = '8Ô∏è‚É£'
             num3 = ''
          if num == 9:
             num2 = '9Ô∏è‚É£'
             num3 = ''
          if num == 10:
             num2 = 'üîü'
             num3 = ''

          top_list.append(f'{num2} {user[1]} |{num3} üîé ID: <code>{user[0]}</code> | {user[12]} –≤—Å–µ–≥–æ –∏–≥—Ä')  

       top_a = '\n'.join(top_list)

       await callback.message.answer( f"<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç —Ç–æ–ø 10 –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–æ—Ç–µ:\n" + top_a, parse_mode='html')

async def top_y_callback(callback: types.CallbackQuery):
       user_id = callback.from_user.id
       user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
       user_name = str(user_name[0])

       list = cursor.execute(f"SELECT * FROM reput ORDER BY reput DESC").fetchmany(10)
       top_list = []

       num = 0

       for user in list:
          user_top = cursor.execute(f'SELECT user_name from users where user_id = {user[0]}').fetchone()
          user_top = user_top[0]

          num += 1

          summ = '{:,}'.format(user[1]).replace(',','.')

          if num == 1:
             num2 = '1Ô∏è‚É£'
             num3 = ' <b>üìà–¢–û–ü 1üìà</b> |'
          if num == 2:
             num2 = '2Ô∏è‚É£'
             num3 = ''
          if num == 3:
             num2 = '3Ô∏è‚É£'
             num3 = ''
          if num == 4:
             num2 = '4Ô∏è‚É£'
             num3 = ''
          if num == 5:
             num2 = '5Ô∏è‚É£'
             num3 = ''
          if num == 6:
             num2 = '6Ô∏è‚É£'
             num3 = ''
          if num == 7:
             num2 = '7Ô∏è‚É£'
             num3 = ''
          if num == 8:
             num2 = '8Ô∏è‚É£'
             num3 = ''
          if num == 9:
             num2 = '9Ô∏è‚É£'
             num3 = ''
          if num == 10:
             num2 = 'üîü'
             num3 = ''
          

          top_list.append(f'{num2} {user_top} |{num3} üîé ID: <code>{user[0]}</code> | üìä {summ} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏')  
       top_y = '\n'.join(top_list)

       await callback.message.answer( f"<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç —Ç–æ–ø 10 —É—Å–ø–µ—à–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–æ—Ç–µ:\n" + top_y, parse_mode='html')




async def top_b_callback(callback: types.CallbackQuery):
       import utils
       user_id = callback.from_user.id
       user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
       user_name = str(user_name[0])

       list = cursor.execute(f"SELECT * FROM users ORDER BY balance DESC").fetchmany(10)
       top_list = []

       num = 0

       for user in list:
          balance3 = await utils.scor_summ(user[4])
            
          num += 1

          if num == 1:
             num2 = '1Ô∏è‚É£'
             num3 = ' <b>üí∞–¢–û–ü 1üí∞</b> |'
          if num == 2:
             num2 = '2Ô∏è‚É£'
             num3 = ''
          if num == 3:
             num2 = '3Ô∏è‚É£'
             num3 = ''
          if num == 4:
             num2 = '4Ô∏è‚É£'
             num3 = ''
          if num == 5:
             num2 = '5Ô∏è‚É£'
             num3 = ''
          if num == 6:
             num2 = '6Ô∏è‚É£'
             num3 = ''
          if num == 7:
             num2 = '7Ô∏è‚É£'
             num3 = ''
          if num == 8:
             num2 = '8Ô∏è‚É£'
             num3 = ''
          if num == 9:
             num2 = '9Ô∏è‚É£'
             num3 = ''
          if num == 10:
             num2 = 'üîü'
             num3 = ''
          
          if user[3] == 'Owner':
             stats = ' ‚úÖ<b>–†–ê–ó–†–ê–ë–û–¢–ß–ò–ö</b>‚úÖ |'
          if user[3] == 'Admin':
             stats = ' ‚õîÔ∏è<b>–ê–î–ú–ò–ù</b>‚õîÔ∏è |'
          if user[3] == 'Helper_Admin':
             stats = ' ‚ö†Ô∏è<b>HELPER –ê–î–ú–ò–ù</b>‚ö†Ô∏è |'
          if user[3] in ['Player', 'Vip', 'Premium', 'Platina', 'Helper', 'Sponsor', 'Osnovatel', 'Vladelec', 'Bog', 'Vlaselin']:
             stats = ''

          
          top_list.append(f"{num2} {user[1]} |{stats}{num3} üîé ID: <code>{user[0]}</code> | ${balance3} ")

       top = "\n".join(top_list)
       await callback.message.answer( f"<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç —Ç–æ–ø 10 –±–æ–≥–∞—á–µ–π –≤ –±–æ—Ç–µ:\n" + top, parse_mode='html')

async def top_callback(callback: types.CallbackQuery):
       list = cursor.execute(f"SELECT * FROM users ORDER BY rating DESC").fetchmany(10)
       top_list = []
       user_id = callback.from_user.id
       user_name = cursor.execute("SELECT user_name from users where user_id = ?", (callback.from_user.id,)).fetchone()
       user_name = str(user_name[0])
       num = 0

       

       for user in list:
           if user[7] >= 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999:
              c6 = 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
           else:
              c6 = user[7]

           

           num += 1

           if num == 1:
              num2 = '1Ô∏è‚É£'
              num3 = ' <b>üíé–¢–û–ü 1üíé</b> |'
           if num == 2:
              num2 = '2Ô∏è‚É£'
              num3 = ''
           if num == 3:
              num2 = '3Ô∏è‚É£'
              num3 = ''
           if num == 4:
              num2 = '4Ô∏è‚É£'
              num3 = ''
           if num == 5:
              num2 = '5Ô∏è‚É£'
              num3 = ''
           if num == 6:
              num2 = '6Ô∏è‚É£'
              num3 = ''
           if num == 7:
              num2 = '7Ô∏è‚É£'
              num3 = ''
           if num == 8:
              num2 = '8Ô∏è‚É£'
              num3 = ''
           if num == 9:
              num2 = '9Ô∏è‚É£'
              num3 = ''
           if num == 10:
              num2 = 'üîü'
              num3 = ''
           c = Decimal(c6)
           c2 = '{:,}'.format(c).replace(',', '.')

           if user[3] == 'Owner':
             stats = ' ‚úÖ<b>–†–ê–ó–†–ê–ë–û–¢–ß–ò–ö</b>‚úÖ |'
           if user[3] == 'Admin':
             stats = ' ‚õîÔ∏è<b>–ê–î–ú–ò–ù</b>‚õîÔ∏è |'
           if user[3] == 'Helper_Admin':
             stats = ' ‚ö†Ô∏è<b>HELPER –ê–î–ú–ò–ù</b>‚ö†Ô∏è |'
           if user[3] in ['Player', 'Vip', 'Premium', 'Platina', 'Helper', 'Sponsor', 'Osnovatel', 'Vladelec', 'Bog', 'Vlaselin']:
             stats = ''

           top_list.append(f"{num2}. {user[1]} |{stats}{num3} ID: <code>{user[0]}</code> |  ‚Äî {c2}üíé ")

       top = "\n".join(top_list)
       await callback.message.answer( f"<a href='tg://user?id={user_id}'>{user_name}</a>, —Ç–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –±–æ—Ç–∞:\n" + top, parse_mode='html')



async def prodazh_valyte_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])
    text = f'''
üìä<b> –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç, –ø—Ä–æ–ø–∏—à–∏—Ç–µ:</b> <code>–∫—É—Ä—Å</code>
    '''
    await callback.message.edit_text(text, parse_mode='html')
async def ysloviya_cash_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    text = f'''
üåê  <b>–£–°–õ–û–í–ò–Ø –ü–û–ö–£–ü–û–ö –í –ò–ì–†–û–í–û–ú –ë–û–¢–ï {config.full_bot_name}</b>

<b>‚ùóÔ∏è –û–ü–õ–ê–¢–ê –° –Æ–ú–ê–ù–ò –ò –î–†–£–ì–ò–• –ë–ê–ù–ö–û–í</b>
<i>- –ï—Å–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ QIWI, –∏ —Ç–∞–∫ –∂–µ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É, —Ç–æ–≥–¥–∞ –ø–æ –ø–æ–≤–æ–¥—É –ø–æ–∫—É–ø–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ {config.owner}</i>

‚ùóÔ∏è<b> –û–ü–õ–ê–¢–ê –° –£–ö–†–ê–ò–ù–´ üá∫üá¶</b>
<i>- –î–ª—è –∂–∏—Ç–µ–ª–µ–π –£–∫—Ä–∞–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π —Å—á—ë—Ç, –ø—Ä–æ—à—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ {config.owner} </i>

<b>‚ùóÔ∏è –î–†–£–ì–ò–ï –í–ê–õ–Æ–¢–´</b>
<i>- –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ —Ä—É–±–ª–∏, –∞ –¥–æ–ª–ª–∞—Ä—ã , —ç–≤—Ä–æ, –≥—Ä–Ω , –∑–ª–æ—Ç—ã–µ, —Ç–æ–≥–¥–∞ –ø—Ä–æ—à—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ {config.owner}</i>
'''

    await callback.message.answer(text, parse_mode='html')


async def oston_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    await callback.message.edit_text(f'''
<a href='tg://user?id={user_id}'>{user_name}</a>,  –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ‚ùï

üßÆ <code>.cl 2+2</code> - <b>–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—á–∏—Ç–∞—Ç—å –ª—é–±—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã</b>
üñº  <code>–ê–≤–∞</code> | <code>–£–¥–∞–ª–∏—Ç—å –∞–≤—É</code> - <b>—Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –Ω–∞ –±–∞–ª–∞–Ω—Å, –∏ —Ç–∞–∫ –∂–µ –µ—ë —É–¥–∞–ª–∏—Ç—å </b>
üí∞ <code>–û–≥—Ä–∞–±–∏—Ç—å –±–∞–Ω–∫</code> - <b>–∫–æ–º–∞–Ω–¥–∞ —Å –ø–æ–º–æ—â—å—é –∫–∞–∫–æ–π –º–æ–∂–Ω–æ –æ–≥—Ä–∞–±–∏—Ç—å –±–∞–Ω–∫</b>
üéÅ <code>–ö–∏—Ç-–±–æ–Ω—É—Å—ã</code> - <b>–≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ –∫–∏—Ç –±–æ–Ω—É—Å—ã</b>
üí≠ <code>–†–ø-–∫–æ–º–∞–Ω–¥—ã</code> - <b>–∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–ø-–∫–æ–º–∞–Ω–¥</b>
üéÅ <code>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</code> - <b>–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</b>
üíº <code>–ø—Ä–æ–º–æ</code> | <code>+–ø—Ä–æ–º–æ</code> - <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>

‚ÑπÔ∏è –ß—Ç–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É , –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>—Å–æ–æ–±—â–µ–Ω–∏–µ–º </b>
    ''', reply_markup=help_back , parse_mode='html')
async def register_help_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])



    await callback.message.edit_text(f'''
<a href='tg://user?id={user_id}'>{user_name}</a>, –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ üîé

üìä {config.channel} - <b>–ò–≥—Ä–æ–≤–æ–π –∫–∞–Ω–∞–ª</b>
üí¨ {config.chat} - <b>–ò–≥—Ä–æ–≤–æ–π —á–∞—Ç</b>
üí¨ {config.chat2} - <b>–ò–≥—Ä–æ–≤–æ–π —á–∞—Ç</b>
üßë‚Äçüíª {config.owner} - <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</b>

‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ

üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:

üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ</b>
üéÆ <b>–ò–≥—Ä—ã </b>
üî® <b>–†–∞–±–æ—Ç—ã</b>
üèò <b>–ò–º—É—â–µ—Å—Ç–≤–æ</b>
üìñ <b>–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏</b>
‚õîÔ∏è <b>Admins menu </b>
‚ùï <b>–û—Å—Ç–∞–ª—å–Ω—ã–µ</b> 
üè∞ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>

‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚ÜòÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö <b>–∫–∞—Ç–µ–≥–æ—Ä–∏–π </b>
    ''', reply_markup=help2, parse_mode='html')



async def osn2_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])
    await callback.message.edit_text(f'''
<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥üìù

üï¥ <code>–ü—Ä–æ—Ñ–∏–ª—å</code> - <b>–≤—ã–≤–æ–¥–∏—Ç –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>
üîé <code>–ù–∏–∫</code>  <b>|</b> <code>–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫</code>  - <b>–í—ã–≤–æ–¥–∏—Ç –≤–∞—à –Ω–∏–∫, –∏ —Ç–∞–∫ –∂–µ –µ–≥–æ –º–µ–Ω—è–µ—Ç </b>
‚öôÔ∏è <code>–°–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å</code>  <b>|</b> <code>+–∏–≥—Ä–æ–∫—É –ø—Ä–µ—Ñ–∏–∫—Å</code>  - <b>–º–µ–Ω—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å —Å–µ–±–µ, –º–µ–Ω—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∏–≥—Ä–æ–∫—É.</b>
üëù <code>–ë</code>  <b>|</b> <code>–ë–∞–ª–∞–Ω—Å</code>  - <b>–≤—ã–≤–æ–¥–∏—Ç –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å</b>
üè¶ <code>–ë–∞–Ω–∫</code>  <b>|</b> <code>–ë–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å 1</code>  <b>|</b> <code>–ë–∞–Ω–∫ —Å–Ω—è—Ç—å 1</code>  - <b>–≤—ã–≤–æ–¥–∏—Ç –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–Ω–∫ —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º , –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª–æ–∂–∏—Ç—å –≤ –±–∞–Ω–∫ —Å—É–º–º—É, –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–Ω—è—Ç—å —Å –±–∞–Ω–∫–∞ —Å—É–º–º—É</b>
üèõ <code>–î–µ–ø–æ–∑–∏—Ç –ø–æ–ª–æ–∂–∏—Ç—å 1</code>  <b>|</b> <code>–î–µ–ø–æ–∑–∏—Ç —Å–Ω—è—Ç—å 1</code>  <b>|</b> <code>–ü—Ä–æ—Ü–µ–Ω—Ç —Å–Ω—è—Ç—å 1</code>  - <b>–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç , –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–Ω—è—Ç—å —Å –¥–µ–ø–æ–∑–∏—Ç–∞ , –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–Ω—è—Ç—å –Ω–∞–∫–∞–ø–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å –¥–µ–ø–æ–∑–∏—Ç–∞ </b>
üü£ <code>–≠—Ñ–∏—Ä–∏—É–º –∫—É—Ä—Å</code>  <b>|</b> <code>–≠—Ñ–∏—Ä–∏—É–º –∫—É–ø–∏—Ç—å 1</code>  <b>|</b> <code>–≠—Ñ–∏—Ä–∏—É–º –ø—Ä–æ–¥–∞—Ç—å  1</code>  - <b>–í—ã–≤–æ–¥–∏—Ç –∫—É—Ä—Å —ç—Ñ–∏—Ä–∏—É–º–∞, –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫—É–ø–∏—Ç—å —ç—Ñ–∏—Ä–∏—É–º, –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–¥–∞—Ç—å —ç—Ñ–∏—Ä–∏—É–º</b>
üíé  <code>–†–µ–π—Ç–∏–Ω–≥</code> <b>|</b> <code>–†–µ–π—Ç–∏–Ω–≥ –∫—É–ø–∏—Ç—å 1</code> <b>|</b> <code>–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞—Ç—å 1</code> - <b>–í—ã–≤–æ–¥–∏—Ç –≤–∞—à –∏–≥—Ä–æ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥, –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫—É–ø–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥, –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–¥–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥</b>
ü§ù <code>–î–∞—Ç—å 1</code>  <b>|</b> <code>–ü–µ—Ä–µ–¥–∞—Ç—å 1</code>  [ID] - <b>–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É, –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É –ø–æ ID</b>
üëë <code>–¢–æ–ø</code>  <b>|</b> <code>–¢–æ–ø –±</code>  - <b>–í—ã–≤–æ–¥–∏—Ç —Ç–æ–ø –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏–≥—Ä–æ–∫–æ–≤, –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ø –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –±–∞–ª–∞–Ω—Å—É –∏–≥—Ä–æ–∫–æ–≤</b>
üëÆ‚Äç‚ôÇÔ∏è <code>–†–µ–ø–æ—Ä—Ç</code>  - <b>–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ —Å–∏—Å—Ç–µ–º—É —Ä–µ–ø–æ—Ä—Ç–æ–≤</b>

‚ÑπÔ∏è –ß—Ç–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É , <b>–Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>
    ''', reply_markup=help_back , parse_mode='html')

async def send_all_message_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    message = callback.message

    if user_id == config.owner_id or user_id == 5223072336:
      pass
    else:
      return
    
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç')
    cursor.execute('UPDATE status_message SET status = "send_all_message"')
    connect.commit()

async def create_post_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    message = callback.message

    if user_id == config.owner_id or user_id == 5223072336:
      pass
    else:
      return
    
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç\n\n–ü—Ä–∏–º–µ—Ä:\n<b>–†–ï–ö–õ–ê–ú–ê</b>\n&–†–µ–∫–ª–∞–º–∞+t.me/qwegamebot')
    cursor.execute('UPDATE status_message SET status = "create_post"')

async def send_id_callback(callback: types.CallbackQuery):
   user_id = callback.from_user.id
   message = callback.message

   if user_id == config.owner_id or user_id == 5223072336:
      pass
   else:
      return

   users_id = cursor.execute('SELECT user_id FROM users').fetchall()
   chats_id = cursor.execute('SELECT chat_id FROM chats').fetchall()

   data_time = f'{datetime.now()}'
   data = (data_time[:10]).replace('-', '_')

   await message.edit_text(f'‚öôÔ∏è –§–∞–π–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è ...')

   list_txt = open(f'UsersId/list_users_id_{data}.txt', 'w')
   for user_id in users_id:
      list_txt.write(f"{user_id[0]}\n")
   
   for chat_id in chats_id:
      list_txt.write(f"{chat_id[0]}\n")
   
   list_txt.close()

   await message.bot.send_document(callback.message.chat.id, open(f'UsersId/list_users_id_{data}.txt', 'rb'), 'üìÉ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö <b>UsersId</b>', parse_mode='html')
   await message.edit_text(f'–§–∞–π–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')

async def owner_menu_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    message = callback.message

    if user_id == config.owner_id or user_id == 5223072336:
      pass
    else:
      return


    owner_menu = InlineKeyboardMarkup(row_width=1)
   #  create_post = InlineKeyboardButton(text='‚öôÔ∏è –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', callback_data='create_post')
    send_all_message = InlineKeyboardButton(text='üë• –†–∞—Å—Å—ã–ª–∫–∞', callback_data='send_all_message')
    send_id = InlineKeyboardButton(text='‚öôÔ∏è –ü–æ–ª—É—á–∏—Ç—å –≤—Å—ë ID', callback_data='send_id')
    owner_menu.add(send_all_message, send_id)
    
    await message.edit_text(f'üë®‚Äçüíª –ú–µ–Ω—é –≤–ª–∞–¥–µ–ª—å—Ü–∞', reply_markup=owner_menu)

async def admins_menu_up_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])
    user_status = cursor.execute("SELECT user_status from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_status = str(user_status[0])

    admins_menu = InlineKeyboardMarkup(row_width=2)
    statistic = InlineKeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üë•', callback_data='statistic')
    admins_comands = InlineKeyboardButton(text='–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã üìù', callback_data='admins_comands')
    owner_menu = InlineKeyboardButton(text='üë®‚Äçüíª –ú–µ–Ω—é –≤–ª–∞–¥–µ–ª—å—Ü–∞', callback_data='owner_menu')
    admins_menu.add(statistic, admins_comands, owner_menu)
    
    su4 = user_status

    text = f'''
‚úÖ <b>–£–°–ü–ï–®–ù–´–ô –í–•–û–î –í –ê–î–ú–ò–ù –ú–ï–ù–Æ</b>

‚ùóÔ∏è –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: <b>{su4}</b>

‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üîê –ö–∞—Ç–µ–≥–æ—Ä–∏–∏

<b>üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>
<b>üìù –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã</b>

‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚ÜòÔ∏è –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>
    '''
    if user_status == 'Owner':
       await callback.message.edit_text(text, reply_markup=admins_menu , parse_mode='html')
       return

    if user_status == 'Helper_Admin':
       await callback.message.edit_text(text, reply_markup=admins_menu , parse_mode='html')
       return
    if user_status == 'Admin':
       await callback.message.edit_text(text, reply_markup=admins_menu , parse_mode='html')
       return
    else:
       await callback.message.edit_text(f"<a href='tg://user?id={user_id}'>{user_name}</a>,–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ üëÆ. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É <a href='t.me/bs_bro5/'>RedSharkQ</a>  ‚ö†Ô∏è ", parse_mode='html')


async def statiskik_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])
    user_status = cursor.execute("SELECT user_status from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_status = str(user_status[0])
    
    sqlite_select_query = """SELECT * from users"""
    cursor.execute(sqlite_select_query)
    records = cursor.fetchall()

    sqlite_select_query2 = """SELECT * from users where user_status = \"Admin\""""
    cursor.execute(sqlite_select_query2)
    records2 = cursor.fetchall()

    sqlite_select_query2 = """SELECT * from users where user_status = \"Helper_Admin\""""
    cursor.execute(sqlite_select_query2)
    records3 = cursor.fetchall()

    sqlite_select_query2 = """SELECT * from users where user_status = \"Owner\""""
    cursor.execute(sqlite_select_query2)
    records4 = cursor.fetchall()

    sqlite_select_query2 = """SELECT * from chats"""
    cursor.execute(sqlite_select_query2)
    chats = cursor.fetchall()

    stats222 = InlineKeyboardMarkup(row_width=1)
    ob_statistik2 = InlineKeyboardButton(text='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üîé', callback_data='stats222')
    
    stats222.add(ob_statistik2)

    text = f'''
<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞  üìä

ü§µ <b>–ò–≥—Ä–æ–∫–æ–≤:</b> <code>{'{:,}'.format(len(records)).replace(',', '.')}</code>
üí¨ <b>–ß–∞—Ç–æ–≤: </b><code>{'{:,}'.format(len(chats)).replace(',', '.')}</code>

üë®‚Äç‚öñÔ∏è <b>OWNER:</b> <code>{len(records4)}</code>
üëÆ‚Äç‚ôÄÔ∏è <b>HELPER-ADMINS:</b> <code>{len(records3)}</code>
ü§† <b>ADMIN:</b> <code>{len(records2)}</code>
    '''
    if user_status == "Admin":
       await callback.message.answer(text,reply_markup=stats222, parse_mode='html')
       return
    if user_status == "Helper_Admin":
       await callback.message.answer(text,reply_markup=stats222, parse_mode='html')
       return

    if user_status == "Owner":
       await callback.message.answer(text,reply_markup=stats222, parse_mode='html')
       return
    else:
       await callback.message.answer(f"<a href='tg://user?id={user_id}'>{user_name}</a>,–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ üëÆ. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É <a href='t.me/bs_bro5/'>RedSharkQ</a>  ‚ö†Ô∏è ", parse_mode='html')


async def ob_Statisyik_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])
    user_status = cursor.execute("SELECT user_status from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_status = user_status[0]

    sqlite_select_query21 = """SELECT * from users where user_status = \"Vip\""""
    cursor.execute(sqlite_select_query21)
    vip = cursor.fetchall()

    sqlite_select_query22 = """SELECT * from users where user_status = \"Premium\""""
    cursor.execute(sqlite_select_query22)
    premium = cursor.fetchall()

    sqlite_select_query23 = """SELECT * from users where user_status = \"Platina\""""
    cursor.execute(sqlite_select_query23)
    platina = cursor.fetchall()

    sqlite_select_query24 = """SELECT * from users where user_status = \"Helper\""""
    cursor.execute(sqlite_select_query24)
    helper = cursor.fetchall()

    sqlite_select_query25 = """SELECT * from users where user_status = \"Sponsor\""""
    cursor.execute(sqlite_select_query25)
    sponsor = cursor.fetchall()

    sqlite_select_query26 = """SELECT * from users where user_status = \"Osnovatel\""""
    cursor.execute(sqlite_select_query26)
    osnovatel = cursor.fetchall()

    sqlite_select_query27 = """SELECT * from users where user_status = \"Vladelec\""""
    cursor.execute(sqlite_select_query27)
    vladelec = cursor.fetchall()

    sqlite_select_query28 = """SELECT * from users where user_status = \"Bog\""""
    cursor.execute(sqlite_select_query28)
    bog = cursor.fetchall()

    sqlite_select_query29 = """SELECT * from users where user_status = \"Vlaselin\""""
    cursor.execute(sqlite_select_query29)
    vlaselin = cursor.fetchall()

    sqlite_select_query = """SELECT * from users"""
    cursor.execute(sqlite_select_query)
    records = cursor.fetchall()

    sqlite_select_query2 = """SELECT * from users where user_status = \"Admin\""""
    cursor.execute(sqlite_select_query2)
    records2 = cursor.fetchall()

    sqlite_select_query2 = """SELECT * from users where user_status = \"Helper_Admin\""""
    cursor.execute(sqlite_select_query2)
    records3 = cursor.fetchall()

    sqlite_select_query2 = """SELECT * from users where user_status = \"Owner\""""
    cursor.execute(sqlite_select_query2)
    records4 = cursor.fetchall()

    sqlite_select_query2 = """SELECT * from family"""
    cursor.execute(sqlite_select_query2)
    all_family = cursor.fetchall()

    sqlite_select_query2 = """SELECT * from user_family"""
    cursor.execute(sqlite_select_query2)
    all_family_users = cursor.fetchall()

    sqlite_select_query2 = """SELECT * from chats"""
    cursor.execute(sqlite_select_query2)
    all_chats = cursor.fetchall()

    sqlite_select_query2 = """SELECT * from users WHERE status_block = 'on'"""
    cursor.execute(sqlite_select_query2)
    block_users = cursor.fetchall()

    if user_status in ['Owner', 'Helper_Admin']:
       await callback.message.answer(f"""
<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ üîé

üîì <b>–û—Å–Ω–æ–≤–Ω–∞—è</b>
         üë§ <b>–ò–≥—Ä–æ–∫–æ–≤:</b> <code>{'{:,}'.format(len(records)).replace(',', '.')}</code>
         üåê <b>–ß–∞—Ç–æ–≤ —Å –±–æ—Ç–æ–º:</b> <code>{'{:,}'.format(len(all_chats)).replace(',','.')}</code>

üî∞ <b>–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏</b>
         ‚ù§Ô∏è <b>–í–ò–ü:</b> <code>{len(vip)}</code>
         üß° <b>–ü–†–ï–ú–ò–£–ú:</b> <code>{len(premium)}</code>
         üíõ <b>–ü–õ–ê–¢–ò–ù–ê:</b> <code>{len(platina)}</code>
         üíö <b>–•–ï–õ–ü–ï–†:</b> <code>{len(helper)}</code>
         üíô <b>–°–ü–û–ù–°–û–†:</b> <code>{len(sponsor)}</code>
         üíú <b>–û–°–ù–û–í–ê–¢–ï–õ–¨:</b> <code>{len(osnovatel)}</code>
         üñ§ <b>–í–õ–ê–î–ï–õ–ï–¶:</b> <code>{len(vladelec)}</code>
         ü§ç <b>–ë–û–ì:</b> <code>{len(bog)}</code>
         ü§é <b>–í–õ–ê–°–¢–ï–õ–ò–ù:</b> <code>{len(vlaselin)}</code>

üè∞ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b>
        üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–°–µ–º—å–µ–π:</b> <code>{len(all_family)}</code>
        üë∂ <b>–°–æ—Å—Ç–æ—è—Ç –≤ —Å–µ–º—å–µ:</b> <code>{len(all_family_users)}</code>

üõë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è</b>
         üíÇ‚Äç‚ôÇÔ∏è <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:</b> <code>{len(block_users)}</code>
         ‚õîÔ∏è <b>ADMIN:</b> <code>{len(records2)}</code>
         ‚ö†Ô∏è <b>HELPER-ADMIN:</b> <code>{len(records3)}</code>
         ‚úÖ <b>OWNER</b>: <code>{len(records4)}    </code>    
       """, parse_mode='html')
    else:
       await callback.message.answer(f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ \"HELPER-ADMINS\" ", parse_mode='html')



async def admin_commands_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])
    user_status = cursor.execute("SELECT user_status from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_status = str(user_status[0]) 
    if user_status == 'Owner':
       commands = '''
1Ô∏è‚É£ | –í—ã–¥–∞—Ç—å [—Å—É–º–º–∞]
2Ô∏è‚É£ | –ó–∞–±—Ä–∞—Ç—å [—Å—É–º–º–∞]
3Ô∏è‚É£ | –£–º–Ω–æ–∂–∏—Ç—å [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
4Ô∏è‚É£ | –û–±–Ω—É–ª–∏—Ç—å
5Ô∏è‚É£ | /ban
6Ô∏è‚É£ | /unban
7Ô∏è‚É£ |–í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞
8Ô∏è‚É£ | –í—ã–¥–∞—Ç—å —Ö–µ–ª–ø–µ—Ä–∞
9Ô∏è‚É£ | –ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞
üîü | –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞
1Ô∏è‚É£1Ô∏è‚É£ | /reset
1Ô∏è‚É£2Ô∏è‚É£ | /warn
1Ô∏è‚É£3Ô∏è‚É£ | reset_id [ID]
1Ô∏è‚É£4Ô∏è‚É£ | /info
1Ô∏è‚É£5Ô∏è‚É£ | /info_id [ID]
1Ô∏è‚É£6Ô∏è‚É£ | –ü–æ–¥–µ–ª–∏—Ç—å [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
1Ô∏è‚É£7Ô∏è‚É£ | /ban_id [ID]
1Ô∏è‚É£8Ô∏è‚É£ | /unban_id [ID]
1Ô∏è‚É£9Ô∏è‚É£ | /warn_id [ID]
2Ô∏è‚É£0Ô∏è‚É£ | /unwarn_id [ID]
2Ô∏è‚É£1Ô∏è‚É£ | /disconect_database
2Ô∏è‚É£2Ô∏è‚É£ | /chats 
2Ô∏è‚É£3Ô∏è‚É£ | reset promo | –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–º–æ - –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
2Ô∏è‚É£4Ô∏è‚É£ | –Ω–æ–≤—ã–π –∫—É—Ä—Å 1–µ15 10 10–µ18 100 100–µ21 1000
2Ô∏è‚É£5Ô∏è‚É£ | –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–∫—É 100
2Ô∏è‚É£6Ô∏è‚É£ | —Å–Ω—è—Ç—å –∏–≥—Ä–æ–∫—É 100
2Ô∏è‚É£7Ô∏è‚É£ | x2donate —Å—Ç–∞—Ç—É—Å off/on
       '''

    if user_status == 'Helper_Admin':
       commands = '''
1Ô∏è‚É£ | –í—ã–¥–∞—Ç—å [—Å—É–º–º–∞]
2Ô∏è‚É£ | –ó–∞–±—Ä–∞—Ç—å [—Å—É–º–º–∞]
3Ô∏è‚É£ | –£–º–Ω–æ–∂–∏—Ç—å [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
4Ô∏è‚É£ | –û–±–Ω—É–ª–∏—Ç—å
5Ô∏è‚É£ | /ban
6Ô∏è‚É£ | /unban
7Ô∏è‚É£ | /warn
8Ô∏è‚É£ | reset_id [ID]
9Ô∏è‚É£ | /info
üîü | /info_id [ID]
1Ô∏è‚É£1Ô∏è‚É£ | –ü–æ–¥–µ–ª–∏—Ç—å [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
1Ô∏è‚É£2Ô∏è‚É£ | /ban_id [ID]
1Ô∏è‚É£3Ô∏è‚É£ | /unban_id [ID]
1Ô∏è‚É£4Ô∏è‚É£ | /warn_id [ID]
1Ô∏è‚É£5Ô∏è‚É£ | /unwarn_id [ID]
1Ô∏è‚É£6Ô∏è‚É£ | /chats
       '''
    if user_status == 'Admin':
       commands = '''
1Ô∏è‚É£ | –í—ã–¥–∞—Ç—å [—Å—É–º–º–∞]
2Ô∏è‚É£ | –ó–∞–±—Ä–∞—Ç—å [—Å—É–º–º–∞]
3Ô∏è‚É£ | –£–º–Ω–æ–∂–∏—Ç—å [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
4Ô∏è‚É£ | –û–±–Ω—É–ª–∏—Ç—å
5Ô∏è‚É£ | /info
6Ô∏è‚É£ | –ü–æ–¥–µ–ª–∏—Ç—å [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
7Ô∏è‚É£ | /chats
       '''
    if user_status == 'Admin':
       await callback.message.answer(f"<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ üìù\n{commands}", parse_mode='html')
       return
    if user_status == 'Helper_Admin':
       await callback.message.answer(f"<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ üìù\n{commands}", parse_mode='html')
       return
    if user_status == 'Owner':
       await callback.message.answer(f"<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ üìù\n{commands}", parse_mode='html')
       return
    else:
       await callback.message.answer(f"<a href='tg://user?id={user_id}'>{user_name}</a>,–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ üëÆ. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É <a href='t.me/bs_bro5/'>RedSharkQ</a>  ‚ö†Ô∏è", parse_mode='html')


async def game2_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])
    await callback.message.edit_text(f'''
<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ üìù

üßä <code>/gamevb</code> | <code>–≤–±</code> - <b>–∏–≥—Ä–∞ –Ω–∞ –≤–µ—Å—å –±–∞–ª–∞–Ω—Å, –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ –∏–≥—Ä—É</b>
‚öΩÔ∏è <code>–§—É—Ç–±–æ–ª  1</code> | <code>–§–± 1</code> - <b>–ê–∑–∞—Ä—Ç–Ω–∞—è –∏–≥—Ä–∞ —Ñ—É—Ç–±–æ–ª</b>
üé± <code>Dice —á 1</code> | <code>Dice –∫ 1</code> | <code>Wheel</code> - <b>–ê–∑–∞—Ä—Ç–Ω–∞—è –∏–≥—Ä–∞ , —Å–æ —Å—Ç–∞–≤–∫–æ–π –Ω–∞ —á—ë—Ä–Ω—ã–π —Ü–≤–µ—Ç, —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç, –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ –∏–≥—Ä—É</b>
ü§µ‚Äç‚ôÄÔ∏è <code>–ö–∞–∑–∏–Ω–æ 1</code> - <b>–ê–∑–∞—Ä—Ç–Ω–∞—è –∏–≥—Ä–∞ –∫–∞–∑–∏–Ω–æ</b>
‚óæÔ∏è <code>–ü–ª–∏–Ω–∫–æ 1</code> -  <b>–ê–∑–∞—Ä—Ç–Ω–∞—è –∏–≥—Ä–∞ –ü–ª–∏–Ω–∫–æ</b>
üé∞ | <code>–°–ø–∏–Ω 1</code> - <b>–ê–∑–∞—Ä—Ç–Ω–∞—è –∏–≥—Ä–∞ –°–ø–∏–Ω</b>
üé≤ <code>–ö—É–±–∏–∫ 1</code> <b>[–¥–æ 7]</b> <code>1</code> - <b>–ê–∑–∞—Ä—Ç–Ω–∞—è –∏–≥—Ä–∞ –ö—É–±–∏–∫</b>
üé≤ <code>–ß—ë—Ç–Ω–æ–µ 1</code> | <code>–Ω–µ—á—ë—Ç–Ω–æ–µ 1</code> - <b>–ê–∑–∞—Ä—Ç–Ω–∞—è –∏–≥—Ä–∞ –ß—ë—Ç–Ω–æ–µ –Ω–µ—á—ë—Ç–Ω–æ–µ —Å–æ —Å—Ç–∞–≤–∫–æ–π –Ω–∞ —á—ë—Ç–Ω–æ–µ , —Å–æ —Å—Ç–∞–≤–∫–æ–π –Ω–∞ –Ω–µ—á—ë—Ç–Ω–æ–µ</b>
üèé <code>–ì–æ–Ω–∫–∞ 1</code> - <b>–ì–æ–Ω–∫–∏ —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏ </b>

‚ÑπÔ∏è –ß—Ç–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É , –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>—Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>
    ''', reply_markup=help_back , parse_mode='html')


async def rabot2_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])
    await callback.message.edit_text(f'''
<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏—Ö –∫–æ–º–∞–Ω–¥üìù

‚õè <code>–®–∞—Ö—Ç–∞</code> | <code>–ö—É–ø–∏—Ç—å –∫–∏—Ä–∫—É</code> | <code>–ö–æ–ø–∞—Ç—å —Ä—É–¥—É</code> | <code>–ü—Ä–æ–¥–∞—Ç—å</code> <b>[–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É–¥—ã] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ —à–∞—Ö—Ç—É, –ø–æ–∫—É–ø–∫–∞ –∫–∏—Ä–∫–∏ –¥–ª—è –¥–æ–±—ã—á–∏ —Ä—É–¥—ã, –¥–æ–±—ã—á–∞ —Ä—É–¥—ã, –ø—Ä–æ–¥–∞–∂–∞ —Ä—É–¥—ã</b>

üåæ  <code>–§–µ—Ä–º–∞</code> | <code>–ö—É–ø–∏—Ç—å –≥—Ä–∞–±–ª–∏</code> | <code>–°–æ–±—Ä–∞—Ç—å</code> <b>[–Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∂–∞—è]</b> | <code>–ü—Ä–æ–¥–∞—Ç—å</code> <b>[–Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∂–∞—è] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ —Ñ–µ—Ä–º—É, –ø–æ–∫—É–ø–∫–∞ –≥—Ä–∞–±–ª–µ–π –¥–ª—è —Å–±–æ—Ä–∞ —É—Ä–æ–∂–∞—è , —Å–±–æ—Ä —É—Ä–æ–∂–∞—è , –ø—Ä–æ–¥–∞–∂–∞ —É—Ä–æ–∂–∞—è </b>

‚ÑπÔ∏è –ß—Ç–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É , –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>—Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>
    ''', reply_markup=help_back , parse_mode='html')


async def im2_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])
    await callback.message.edit_text(f'''
<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∏–º—É—â–µ—Å—Ç–≤–æüìù

üè†  <code>–î–æ–º–∞</code> | <code>–ú–æ–π –¥–æ–º</code> - <b>–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ —Ç–∞–∫ –∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ –≤–∞—à –¥–æ–º</b>

üïã <code>–ü–æ–¥–≤–∞–ª—ã</code> | <code>–ü—Ä–æ–¥–∞—Ç—å –ø–æ–¥–≤–∞–ª</code> - <b>–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–≤–∞–ª–æ–≤ –∏ —Ç–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ –ø–æ–∫—É–ø–∫–∏ –∏—Ö , –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–¥–∞—Ç—å –ø–æ–¥–≤–∞–ª</b>

üõ† <code>–ö—Ä–∞—Ñ—Ç–∏—Ç—å</code> | <code>–°–∏—Å—Ç–µ–º–∞ –∫—Ä–∞—Ñ—Ç–∞</code> - <b>–ø–æ–∑–≤–æ–ª—è–µ—Ç –∫—Ä–∞—Ñ—Ç–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ , –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ –∫—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤</b>

üöò <code>–ú–∞—à–∏–Ω—ã</code> | <code>–ú–æ—è –º–∞—à–∏–Ω–∞</code> - <b>–í—ã–≤–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—à–∏–Ω—ã , –∏ —Ç–∞–∫ –∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ –ø–æ–∫—É–ø–∫—É –∏—Ö , –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ –≤–∞—à—É –º–∞—à–∏–Ω—É</b>

üöó <code>–ó–∞–ø—Ä–∞–≤–∏—Ç—å</code> | <code>–ü–æ—á–∏–Ω–∏—Ç—å</code> - <b>–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –∑–∞–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å , –ø–æ–∑–≤–æ–ª—è–µ—Ç –µ–≥–æ –ø–æ—á–∏–Ω–∏—Ç—å [–ù–∞ —Ç–µ—Ö. —Ä–∞–±–æ—Ç–∞—Ö]</b>

‚ÑπÔ∏è –ß—Ç–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É , –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>—Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>
    ''', reply_markup=help_back , parse_mode='html')


async def priv2_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])
    await callback.message.edit_text(f'''
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏üìù

‚ù§Ô∏è <code>–í–ò–ü</code> - <b>–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –í–ò–ü</b>
üß° <code>–ü–†–ï–ú–ò–£–ú</code> - <b>–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –ü–†–ï–ú–ò–£–ú</b>
üíõ <code>–ü–õ–ê–¢–ò–ù–ê</code> - <b>–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –ü–õ–ê–¢–ò–ù–ê</b>
üíö <code>–•–ï–õ–ü–ï–†</code> - <b>–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –•–ï–õ–ü–ï–†</b>
üíô <code>–°–ü–û–ù–°–û–†</code> - <b>–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –°–ü–û–ù–°–û–†</b>
üíú <code>–û–°–ù–û–í–ê–¢–ï–õ–¨</code> - <b>–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –û–°–ù–û–í–ê–¢–ï–õ–¨</b>
üñ§ <code>–í–õ–ê–î–ï–õ–ï–¶</code> - <b>–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –í–õ–ê–î–ï–õ–ï–¶</b>
ü§ç <code>–ë–û–ì</code> - <b>–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –ë–û–ì</b>
ü§é <code>–í–õ–ê–°–¢–ï–õ–ò–ù</code> - <b>–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –í–õ–ê–°–¢–ï–õ–ò–ù</b>

‚ÑπÔ∏è –ß—Ç–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É , –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>—Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>
    ''', reply_markup=help_back , parse_mode='html')



async def craft_resurs1(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    basement = cursor.execute("SELECT basement from house where user_id = ?",(callback.from_user.id,)).fetchone()
    basement = int(basement[0])

    iron = cursor.execute("SELECT iron from mine where user_id = ?",(callback.from_user.id,)).fetchone()
    iron = int(iron[0])

    metall = cursor.execute("SELECT metall from mine where user_id = ?",(callback.from_user.id,)).fetchone()
    metall = int(metall[0])

    linen = cursor.execute("SELECT linen from farm where user_id = ?",(callback.from_user.id,)).fetchone()
    linen = int(linen[0])

    cotton = cursor.execute("SELECT cotton from farm where user_id = ?",(callback.from_user.id,)).fetchone()
    cotton = int(cotton[0])


    #rake, pick
    rake = cursor.execute("SELECT rake from farm where user_id = ?", (callback.from_user.id,)).fetchone()
    rake = rake[0]

    pick = cursor.execute("SELECT pick from mine where user_id = ?", (callback.from_user.id,)).fetchone()
    pick = pick[0]
    
    if basement == 1:
       basement_period = 30
   
    if basement == 2:
       basement_period = 15

    if basement == 3:
       basement_period = 4
    
    rx = random.randint(0,1000)

    get–µ = cursor.execute("SELECT time_craft FROM bot_time WHERE user_id = ?", (callback.from_user.id,)).fetchone()
    last_stavka = int(get–µ[0])
    stavkatime = time.time() - float(last_stavka)
    if basement > 0:
       if stavkatime > basement_period:
          if int(rx) in range(0,750):
             await callback.message.answer( f"üë® |–ò–≥—Ä–æ–∫: <a href='tg://user?id={user_id}'>{user_name}</a>\n‚öôÔ∏è |–î–µ–π—Å—Ç–≤–∏–µ: –ö—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞\nüì¶ | –ü—Ä–µ–¥–º–µ—Ç: –ö–∏—Ä–∫–∞ Zerro ‚õè\nüíà |–†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ–≤–∞–ª ‚ùå", parse_mode='html')
             cursor.execute(f'UPDATE bot_time SET time_craft = {time.time()} WHERE user_id = {user_id}')
             connect.commit()
             await bot.answer_callback_query(callback.id)
          if int(rx) in range(751,1000):
             await callback.message.answer(  f"üë® |–ò–≥—Ä–æ–∫: <a href='tg://user?id={user_id}'>{user_name}</a>\n‚öôÔ∏è |–î–µ–π—Å—Ç–≤–∏–µ: –ö—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞\nüì¶ | –ü—Ä–µ–¥–º–µ—Ç: –ö–∏—Ä–∫–∞ Zerro ‚õè\nüíà |–†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ ‚úÖ", parse_mode='html')
             await callback.message.answer(  f"<a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: –ö–∏—Ä–∫–∞ Zerro‚õè\nüî± | –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: –•2 –î–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤", parse_mode='html')
             cursor.execute(f'UPDATE bot_time SET time_craft = {time.time()} WHERE user_id = {user_id}')
             cursor.execute(f'UPDATE mine SET pick = "Zerro" WHERE user_id = {user_id}')
             connect.commit()
             await bot.answer_callback_query(callback.id)
       else:
          await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –ø–æ–¥–æ–∂–¥–∏—Ç–µ! –° –≤–∞—à–∏–º –ø–æ–¥–≤–∞–ª–æ–º –º–æ–∂–Ω–æ –∫—Ä–∞—Ñ—Ç–∏—Ç—å —Ä–∞–∑ –≤ {basement_period} —Å–µ–∫—É–Ω–¥", parse_mode='html')
          await bot.answer_callback_query(callback.id)
    else:
       await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –ø–æ–¥–æ–∂–¥–∏—Ç–µ! –ö—Ä–∞—Ñ—Ç–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–≤–∞–ª–æ–º", parse_mode='html')
       await bot.answer_callback_query(callback.id)



async def craft_resurs2(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    basement = cursor.execute("SELECT basement from house where user_id = ?",(callback.from_user.id,)).fetchone()
    basement = int(basement[0])

    iron = cursor.execute("SELECT iron from mine where user_id = ?",(callback.from_user.id,)).fetchone()
    iron = int(iron[0])

    metall = cursor.execute("SELECT metall from mine where user_id = ?",(callback.from_user.id,)).fetchone()
    metall = int(metall[0])

    linen = cursor.execute("SELECT linen from farm where user_id = ?",(callback.from_user.id,)).fetchone()
    linen = int(linen[0])

    cotton = cursor.execute("SELECT cotton from farm where user_id = ?",(callback.from_user.id,)).fetchone()
    cotton = int(cotton[0])


    #rake, pick
    rake = cursor.execute("SELECT rake from farm where user_id = ?", (callback.from_user.id,)).fetchone()
    rake = rake[0]

    pick = cursor.execute("SELECT pick from mine where user_id = ?", (callback.from_user.id,)).fetchone()
    pick = pick[0]
    
    if basement == 1:
       basement_period = 30
   
    if basement == 2:
       basement_period = 15

    if basement == 3:
       basement_period = 4
    
    rx = random.randint(0,1000)

    get–µ = cursor.execute("SELECT time_craft FROM bot_time WHERE user_id = ?", (callback.from_user.id,)).fetchone()
    last_stavka = int(get–µ[0])
    stavkatime = time.time() - float(last_stavka)
    if basement > 0:
       if stavkatime > basement_period:
          if int(rx) in range(0,750):
             await callback.message.answer( f"üë® |–ò–≥—Ä–æ–∫: <a href='tg://user?id={user_id}'>{user_name}</a>\n‚öôÔ∏è |–î–µ–π—Å—Ç–≤–∏–µ: –ö—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞\nüì¶ | –ü—Ä–µ–¥–º–µ—Ç: –ì—Ä–∞–±–ª–∏ Zerro üåæ\nüíà |–†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ–≤–∞–ª ‚ùå", parse_mode='html')
             cursor.execute(f'UPDATE bot_time SET time_craft = {time.time()} WHERE user_id = {user_id}')
             connect.commit()
             await bot.answer_callback_query(callback.id)
          if int(rx) in range(751,1000):
             await callback.message.answer(  f"üë® |–ò–≥—Ä–æ–∫: <a href='tg://user?id={user_id}'>{user_name}</a>\n‚öôÔ∏è |–î–µ–π—Å—Ç–≤–∏–µ: –ö—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞\nüì¶ | –ü—Ä–µ–¥–º–µ—Ç: –ì—Ä–∞–±–ª–∏ Zerro üåæ\nüíà |–†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ ‚úÖ", parse_mode='html')
             await callback.message.answer(  f"<a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: –ì—Ä–∞–±–ª–∏ Zerro üåæ\nüî± | –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: –•2 –î–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤", parse_mode='html')
             cursor.execute(f'UPDATE bot_time SET time_craft = {time.time()} WHERE user_id = {user_id}')
             cursor.execute(f'UPDATE farm SET rake = "Zerro" WHERE user_id = {user_id}')
             connect.commit()
             await bot.answer_callback_query(callback.id)
       else:
          await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –ø–æ–¥–æ–∂–¥–∏—Ç–µ! –° –≤–∞—à–∏–º –ø–æ–¥–≤–∞–ª–æ–º –º–æ–∂–Ω–æ –∫—Ä–∞—Ñ—Ç–∏—Ç—å —Ä–∞–∑ –≤ {basement_period} —Å–µ–∫—É–Ω–¥", parse_mode='html')
          await bot.answer_callback_query(callback.id)
    else:
       await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –ø–æ–¥–æ–∂–¥–∏—Ç–µ! –ö—Ä–∞—Ñ—Ç–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–≤–∞–ª–æ–º", parse_mode='html')
       await bot.answer_callback_query(callback.id)




async def craft_resurs3(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    basement = cursor.execute("SELECT basement from house where user_id = ?",(callback.from_user.id,)).fetchone()
    basement = int(basement[0])

    iron = cursor.execute("SELECT iron from mine where user_id = ?",(callback.from_user.id,)).fetchone()
    iron = int(iron[0])

    metall = cursor.execute("SELECT metall from mine where user_id = ?",(callback.from_user.id,)).fetchone()
    metall = int(metall[0])

    linen = cursor.execute("SELECT linen from farm where user_id = ?",(callback.from_user.id,)).fetchone()
    linen = int(linen[0])

    cotton = cursor.execute("SELECT cotton from farm where user_id = ?",(callback.from_user.id,)).fetchone()
    cotton = int(cotton[0])


    #rake, pick
    rake = cursor.execute("SELECT rake from farm where user_id = ?", (callback.from_user.id,)).fetchone()
    rake = rake[0]

    pick = cursor.execute("SELECT pick from mine where user_id = ?", (callback.from_user.id,)).fetchone()
    pick = pick[0]
    
    if basement == 1:
       basement_period = 30
   
    if basement == 2:
       basement_period = 15

    if basement == 3:
       basement_period = 4
    
    rx = random.randint(0,1000)

    get–µ = cursor.execute("SELECT time_craft FROM bot_time WHERE user_id = ?", (callback.from_user.id,)).fetchone()
    last_stavka = int(get–µ[0])
    stavkatime = time.time() - float(last_stavka)
    if basement > 0:
       if stavkatime > basement_period:
          if int(rx) in range(0,900):
             await callback.message.answer( f"üë® |–ò–≥—Ä–æ–∫: <a href='tg://user?id={user_id}'>{user_name}</a>\n‚öôÔ∏è |–î–µ–π—Å—Ç–≤–∏–µ: –ö—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞\nüì¶ | –ü—Ä–µ–¥–º–µ—Ç: –ö–∏—Ä–∫–∞ Cherick ‚õè\nüíà |–†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ–≤–∞–ª ‚ùå", parse_mode='html')
             cursor.execute(f'UPDATE bot_time SET time_craft = {time.time()} WHERE user_id = {user_id}')
             connect.commit()
             await bot.answer_callback_query(callback.id)
          if int(rx) in range(901,1000):
             await callback.message.answer(  f"üë® |–ò–≥—Ä–æ–∫: <a href='tg://user?id={user_id}'>{user_name}</a>\n‚öôÔ∏è |–î–µ–π—Å—Ç–≤–∏–µ: –ö—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞\nüì¶ | –ü—Ä–µ–¥–º–µ—Ç: –ö–∏—Ä–∫–∞ Cherick ‚õè\nüíà |–†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ ‚úÖ", parse_mode='html')
             await callback.message.answer(  f"<a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: –ö–∏—Ä–∫–∞ Cherick ‚õè\nüî± | –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: –•2 –î–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤, –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è —Å–Ω–∏–º–∞–µ—Ç—å—Å—è –Ω–∞ 50%", parse_mode='html')
             cursor.execute(f'UPDATE bot_time SET time_craft = {time.time()} WHERE user_id = {user_id}')
             cursor.execute(f'UPDATE mine SET pick = "Cherick" WHERE user_id = {user_id}')
             connect.commit()
             await bot.answer_callback_query(callback.id)
       else:
          await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –ø–æ–¥–æ–∂–¥–∏—Ç–µ! –° –≤–∞—à–∏–º –ø–æ–¥–≤–∞–ª–æ–º –º–æ–∂–Ω–æ –∫—Ä–∞—Ñ—Ç–∏—Ç—å —Ä–∞–∑ –≤ {basement_period} —Å–µ–∫—É–Ω–¥", parse_mode='html')
          await bot.answer_callback_query(callback.id)
    else:
       await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –ø–æ–¥–æ–∂–¥–∏—Ç–µ! –ö—Ä–∞—Ñ—Ç–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–≤–∞–ª–æ–º", parse_mode='html')
       await bot.answer_callback_query(callback.id)


async def resurs4_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    basement = cursor.execute("SELECT basement from house where user_id = ?",(callback.from_user.id,)).fetchone()
    basement = int(basement[0])

    iron = cursor.execute("SELECT iron from mine where user_id = ?",(callback.from_user.id,)).fetchone()
    iron = int(iron[0])

    metall = cursor.execute("SELECT metall from mine where user_id = ?",(callback.from_user.id,)).fetchone()
    metall = int(metall[0])

    linen = cursor.execute("SELECT linen from farm where user_id = ?",(callback.from_user.id,)).fetchone()
    linen = int(linen[0])

    cotton = cursor.execute("SELECT cotton from farm where user_id = ?",(callback.from_user.id,)).fetchone()
    cotton = int(cotton[0])


    #rake, pick
    rake = cursor.execute("SELECT rake from farm where user_id = ?", (callback.from_user.id,)).fetchone()
    rake = rake[0]

    pick = cursor.execute("SELECT pick from mine where user_id = ?", (callback.from_user.id,)).fetchone()
    pick = pick[0]
    
    if basement == 1:
       basement_period = 30
   
    if basement == 2:
       basement_period = 15

    if basement == 3:
       basement_period = 4
    
    rx = random.randint(0,1000)

    get–µ = cursor.execute("SELECT time_craft FROM bot_time WHERE user_id = ?", (callback.from_user.id,)).fetchone()
    last_stavka = int(get–µ[0])
    stavkatime = time.time() - float(last_stavka)
    if basement > 0:
       if stavkatime > basement_period:
          if int(rx) in range(0,900):
             await callback.message.answer( f"üë® |–ò–≥—Ä–æ–∫: <a href='tg://user?id={user_id}'>{user_name}</a>\n‚öôÔ∏è |–î–µ–π—Å—Ç–≤–∏–µ: –ö—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞\nüì¶ | –ü—Ä–µ–¥–º–µ—Ç: –ì—Ä–∞–±–ª–∏ Cherick üåæ\nüíà |–†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ–≤–∞–ª ‚ùå", parse_mode='html')
             cursor.execute(f'UPDATE bot_time SET time_craft = {time.time()} WHERE user_id = {user_id}')
             connect.commit()
             await bot.answer_callback_query(callback.id)
          if int(rx) in range(901,1000):
             await callback.message.answer(  f"üë® |–ò–≥—Ä–æ–∫: <a href='tg://user?id={user_id}'>{user_name}</a>\n‚öôÔ∏è |–î–µ–π—Å—Ç–≤–∏–µ: –ö—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞\nüì¶ | –ü—Ä–µ–¥–º–µ—Ç: –ì—Ä–∞–±–ª–∏ Cherick üåæ\nüíà |–†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ ‚úÖ", parse_mode='html')
             await callback.message.answer(  f"<a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: –ì—Ä–∞–±–ª–∏ Cherick üåæ\nüî± | –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: –•2 –î–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤, –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è —Å–Ω–∏–º–∞–µ—Ç—å—Å—è –Ω–∞ 50%", parse_mode='html')
             cursor.execute(f'UPDATE bot_time SET time_craft = {time.time()} WHERE user_id = {user_id}')
             cursor.execute(f'UPDATE farm SET rake = "Cherick" WHERE user_id = {user_id}')
             connect.commit()
             await bot.answer_callback_query(callback.id)
       else:
          await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –ø–æ–¥–æ–∂–¥–∏—Ç–µ! –° –≤–∞—à–∏–º –ø–æ–¥–≤–∞–ª–æ–º –º–æ–∂–Ω–æ –∫—Ä–∞—Ñ—Ç–∏—Ç—å —Ä–∞–∑ –≤ {basement_period} —Å–µ–∫—É–Ω–¥", parse_mode='html')
          await bot.answer_callback_query(callback.id)
    else:
       await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –ø–æ–¥–æ–∂–¥–∏—Ç–µ! –ö—Ä–∞—Ñ—Ç–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–≤–∞–ª–æ–º", parse_mode='html')
       await bot.answer_callback_query(callback.id)




async def case_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])
    case_shop = InlineKeyboardMarkup(row_width=2)
    money_case1 = InlineKeyboardButton(text='üí∏ Money-Case', callback_data='money_case')
    donate_case2 = InlineKeyboardButton(text='üßß Donate-Case', callback_data='donate_case')
    raindow_case3 = InlineKeyboardButton(text='üí∞ Raindow-Case', callback_data='raindow_case')
    case_shop.add(money_case1, donate_case2, raindow_case3)

    money_case = cursor.execute(f'SELECT case_money from user_case where user_id = {user_id}').fetchone()
    money_case = int(money_case[0])

    donate_case = cursor.execute(f'SELECT case_donate from user_case where user_id = {user_id}').fetchone()
    donate_case = int(donate_case[0])

    raindow_case = cursor.execute(f'SELECT number from raindow_case where user_id = {user_id}').fetchone()
    raindow_case = int(raindow_case[0])

    ob_members = 0

    if raindow_case > 0:
      ob_members += 1
      raindow_case2 = f'      üí∞ | Raindow-Case - {raindow_case} —à—Ç.\n'
    else:
      raindow_case2 = ''

    if donate_case > 0:
       ob_members += 1
       donate_case2 = f'      üßß | Donate-Case - {donate_case} —à—Ç.\n'
    else:
       donate_case2 = ''

    if money_case > 0:
       ob_members += 1
       money_case2 = f'      üí∏ | Money-Case - {money_case} —à—Ç.\n'
    else:
       money_case2 = ''
   
    if ob_members > 0:
       casee = 'üéÅ | –í–∞—à–∏ –∫–µ–π—Å—ã:\n'
    else:
       casee = 'üòü | –£ –≤–∞—Å –Ω–µ—Ç—É –∫–µ–π—Å–æ–≤...'

    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–µ–π—Å—ã üéÅ

üí∏ | Money-Case - 50 Donate-Coins ü™ô
üßß | Donate-Case - 100 Donate-Coins ü™ô
üí∞ | Raindow-Case - 500 —Ä—É–±.

{casee}{money_case2}{donate_case2}{raindow_case2}

üõí –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å\–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–∏–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è  
    """, reply_markup=case_shop,  parse_mode='html')
 


async def raindow_case_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])

    raindow_case_cash12 = InlineKeyboardMarkup(row_width=2)
    raindow_case_cash1 = InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å –∫–µ–π—Å–∞', callback_data='raindow_case_cash2')
    raindow_case_cash12.add(raindow_case_cash1)

    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ Raindow-Case üí∞

‚ÑπÔ∏è | –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏  Raindow-Case –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 100 —Ä—É–±, –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ADMIN, –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ HELPER ADMIN

üõí –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üîΩ
    """, reply_markup=raindow_case_cash12,  parse_mode='html')



async def donate_case_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])

    donate_case_cash = InlineKeyboardMarkup(row_width=2)
    donate_case_cash1 = InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å –∫–µ–π—Å', callback_data='donate_case_cash1')
    donate_case_cash.add(donate_case_cash1)

    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ Donate-Case üßß

‚ÑπÔ∏è | –í 1 Donate-Case –ø–∞–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ —Å–ª—É—á–∞–π–Ω–∞—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è!

üõí –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üîΩ
    """, reply_markup=donate_case_cash,  parse_mode='html')


async def raindow_case_cash1_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    money = await user_money(user_id)

    raindow_case = cursor.execute(f'SELECT number from raindow_case where user_id = {user_id}').fetchone()
    raindow_case = int(raindow_case[0])

    if money >= 500:
       await callback.message.answer(f"üí∞ | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª 1 Raindow-Case", parse_mode='html')
       cursor.execute(f'UPDATE raindow_case SET number = {raindow_case + 1} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE money_balance SET money = {money - 500} WHERE user_id = {user_id}')
       connect.commit()
       return
    else:
       await callback.message.answer(f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–±.", parse_mode='html')



async def donate_case_cash1_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])

    donate_case = cursor.execute(f'SELECT case_donate from user_case where user_id = {user_id}').fetchone()
    donate_case = int(donate_case[0])

    if donate_coins >= 100:
       await callback.message.answer(f"üßß | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª 1 Donate-Case", parse_mode='html')
       cursor.execute(f'UPDATE user_case SET case_donate = {donate_case + 1} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET donate_coins = {donate_coins - 100} WHERE user_id = {user_id}')
       connect.commit()
       return
    else:
       await callback.message.answer(f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Donate-Coins ü™ô", parse_mode='html')



async def up_raindow_case_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    raindow_case = cursor.execute(f'SELECT number from raindow_case where user_id = {callback.from_user.id}').fetchone()
    raindow_case = int(raindow_case[0])

    if raindow_case < 1:
       await callback.message.answer( f"üÜò | –ò–≥—Ä–æ–∫, —É –≤–∞—Å –Ω–µ—Ç—É Raindow-Case", parse_mode='html')
       return
   
    rx = random.randint(0, 10000)

    if int(rx) in range(0, 9995):
      money = await user_money(callback.from_user.id)
      cursor.execute(f'UPDATE money_balance SET money = {money + 100} WHERE user_id = {callback.from_user.id}')
      await callback.message.answer(f'üí∞ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å Raindow-Case –∏ –ø–æ–ª—É—á–∏–ª–∏ 100 —Ä—É–±.')
    elif int(rx) in range(9996, 9999):
      cursor.execute(f'UPDATE users SET user_status = "Admin" WHERE user_id = {callback.from_user.id}')
      await callback.message.answer(f'üëÆ‚Äç‚ôÇÔ∏è –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å Raindow-Case –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ <b>ADMIN</b>', parse_mode='html')
    elif int(rx) == 10000:
      cursor.execute(f'UPDATE users SET user_status = "Helper_Admin" WHERE user_id = {callback.from_user.id}')
      await callback.message.answer(f'ü§µ‚Äç‚ôÇÔ∏è –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å Raindow-Case –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ <b>HELPER ADMIN</b>', parse_mode='html')
    
    cursor.execute(f'UPDATE raindow_case SET number = {raindow_case - 1} WHERE user_id = {callback.from_user.id}')
    connect.commit()



async def up_donate_case_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_case = cursor.execute(f'SELECT case_donate from user_case where user_id = {user_id}').fetchone()
    donate_case = int(donate_case[0])

    if donate_case < 1:
       await callback.message.answer( f"üÜò | –ò–≥—Ä–æ–∫, —É –≤–∞—Å –Ω–µ—Ç—É –î–æ–Ω–∞—Ç –∫–µ–π—Å–æ–≤", parse_mode='html')
       return
   
    rx = random.randint(0, 935)

    if int(rx) in range(0,500):
       await callback.message.answer( f"""
‚è≥ | <i>–û—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ .....</i>      
       """, parse_mode='html')
       time.sleep(2)
       await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±–∏–ª–∏ —Å –¥–æ–Ω–∞—Ç –∫–µ–π—Å–∞ - <b>üíö –•–ï–õ–ü–ï–†</b>    
       """, parse_mode='html')
       cursor.execute(f'UPDATE users SET user_status = "Helper" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–•–ï–õ–ü–ï–† üíö" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_donate = {donate_case - 1} WHERE user_id = {user_id}')
       connect.commit()
    if int(rx) in range(501,750):
       await callback.message.answer( f"""
‚è≥ | <i>–û—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ .....</i>      
       """, parse_mode='html')
       time.sleep(2)
       await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±–∏–ª–∏ —Å –¥–æ–Ω–∞—Ç –∫–µ–π—Å–∞ - <b>üíô –°–ü–û–ù–°–û–†</b>    
       """, parse_mode='html')
       cursor.execute(f'UPDATE users SET user_status = "Sponsor" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–°–ü–û–ù–°–û–† üíô" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_donate = {donate_case - 1} WHERE user_id = {user_id}')
       connect.commit()
    if int(rx) in range(751,850):
       await callback.message.answer( f"""
‚è≥ | <i>–û—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ .....</i>      
       """, parse_mode='html')
       time.sleep(2)
       await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±–∏–ª–∏ —Å –¥–æ–Ω–∞—Ç –∫–µ–π—Å–∞ - <b>üíú –û–°–ù–û–í–ê–¢–ï–õ–¨</b>    
       """, parse_mode='html')
       cursor.execute(f'UPDATE users SET user_status = "Osnovatel" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–û–°–ù–û–í–ê–¢–ï–õ–¨ üíú" WHERE user_id = {user_id}')
       connect.commit()
    if int(rx) in range(851,900):
       await callback.message.answer( f"""
‚è≥ | <i>–û—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ .....</i>      
       """, parse_mode='html')
       time.sleep(2)
       await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±–∏–ª–∏ —Å –¥–æ–Ω–∞—Ç –∫–µ–π—Å–∞ - <b>üñ§ –í–õ–ê–î–ï–õ–ï–¶</b>    
       """, parse_mode='html')
       cursor.execute(f'UPDATE users SET user_status = "Vladelec" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–í–õ–ê–î–ï–õ–ï–¶ üñ§" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_donate = {donate_case - 1} WHERE user_id = {user_id}')
       connect.commit()
    if int(rx) in range(901,925):
       await callback.message.answer( f"""
‚è≥ | <i>–û—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ .....</i>      
       """, parse_mode='html')
       time.sleep(2)
       await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±–∏–ª–∏ —Å –¥–æ–Ω–∞—Ç –∫–µ–π—Å–∞ - <b>ü§ç –ë–û–ì</b>    
       """, parse_mode='html')
       cursor.execute(f'UPDATE users SET user_status = "Bog" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–ë–û–ì ü§ç" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_donate = {donate_case - 1} WHERE user_id = {user_id}')
       connect.commit()
    if int(rx) in range(925,935):
       await callback.message.answer( f"""
‚è≥ | <i>–û—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ .....</i>      
       """, parse_mode='html')
       time.sleep(2)
       await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±–∏–ª–∏ —Å –¥–æ–Ω–∞—Ç –∫–µ–π—Å–∞ - <b>ü§é –í–õ–ê–°–¢–ï–õ–ò–ù</b>    
       """, parse_mode='html')
       cursor.execute(f'UPDATE users SET user_status = "Vlaselin" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–í–õ–ê–°–¢–ï–õ–ò–ù ü§é" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_donate = {donate_case - 1} WHERE user_id = {user_id}')
       connect.commit()


async def up_money_case_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    money_case = cursor.execute(f'SELECT case_money from user_case where user_id = {user_id}').fetchone()
    money_case = int(money_case[0])

    balance = cursor.execute(f'SELECT balance from users where user_id = {user_id}').fetchone()
    balance = int(balance[0])

    if money_case < 1:
       await callback.message.answer( f"üÜò | –ò–≥—Ä–æ–∫, —É –≤–∞—Å –Ω–µ—Ç—É Money –∫–µ–π—Å–æ–≤", parse_mode='html')
       return
       
    rx = random.randint(0, 100000000000000000000000000000)
    rx2 = '{:,}'.format(rx).replace(',', '.')

    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ Money-Case üí∏

üîé | –†–µ–∑—É–ª—å—Ç–∞—Ç: {rx2}$    
    """, parse_mode='html')
    cursor.execute(f'UPDATE users SET balance = {balance + rx} WHERE user_id = {user_id}')
    cursor.execute(f'UPDATE user_case SET case_money = {money_case - 1} WHERE user_id = {user_id}')
    connect.commit()


async def money_case_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])

    money_case_cash = InlineKeyboardMarkup(row_width=2)
    money_case_cash1 = InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å –∫–µ–π—Å', callback_data='money_case_cash1')
    money_case_cash.add(money_case_cash1)

    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ Money-Case üí∏

‚ÑπÔ∏è | –í 1 Money-Case –≤—ã–ø–∞–¥–∞–µ—Ç –æ—Ç 0$ –∏ –¥–æ 999–≥—É–≥–ª.

üõí –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üîΩ
    """, reply_markup=money_case_cash,  parse_mode='html')



async def money_case_cash1_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])

    money_case = cursor.execute(f'SELECT case_money from user_case where user_id = {user_id}').fetchone()
    money_case = int(money_case[0])

    if donate_coins >= 50:
       await callback.message.answer(f"üí∏ | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª 1 Money-Case", parse_mode='html')
       cursor.execute(f'UPDATE user_case SET case_money = {money_case + 1} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET donate_coins = {donate_coins - 50} WHERE user_id = {user_id}')
       connect.commit()
       return
    else:
       await callback.message.answer(f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Donate-Coins ü™ô", parse_mode='html')


async def privilegii_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])
    
    privilegii_inline = InlineKeyboardMarkup(row_width=3)
    vip = InlineKeyboardButton(text='‚ù§Ô∏è –í–ò–ü ', callback_data='vip')
    premium = InlineKeyboardButton(text='üß° –ü–†–ï–ú–ò–£–ú', callback_data='premium')
    platina = InlineKeyboardButton(text='üíõ –ü–õ–ê–¢–ò–ù–ê', callback_data='platina')
    helper = InlineKeyboardButton(text='üíö –•–ï–õ–ü–ï–†', callback_data='helper')
    sponsor = InlineKeyboardButton(text='üíô –°–ü–û–ù–°–û–†', callback_data='sponsor')
    osnovatel = InlineKeyboardButton(text='üíú –û–°–ù–û–í–ê–¢–ï–õ–¨', callback_data='osnovatel')
    vladelec = InlineKeyboardButton(text='üñ§ –í–õ–ê–î–ï–õ–ï–¶', callback_data='vladelec')
    bog = InlineKeyboardButton(text='ü§ç –ë–û–ì', callback_data='bog')
    vlastelin = InlineKeyboardButton(text='ü§é –í–õ–ê–°–¢–ï–õ–ò–ù', callback_data='vlastelin')
    privilegii_inline.add(vip, premium, platina, helper, sponsor, osnovatel, vladelec, bog, vlastelin)
    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏üìù

‚ù§Ô∏è | –í–ò–ü - 10 Donate-coins ü™ô
üß° | –ü–†–ï–ú–ò–£–ú - 30 Donate-coins ü™ô
üíõ | –ü–õ–ê–¢–ò–ù–ê - 50 Donate-coins ü™ô
üíö | –•–ï–õ–ü–ï–† - 100 Donate-coins ü™ô
üíô | –°–ü–û–ù–°–û–† - 155 Donate-coins ü™ô
üíú | –û–°–ù–û–í–ê–¢–ï–õ–¨ - 170 Donate-coins ü™ô
üñ§ | –í–õ–ê–î–ï–õ–ï–¶ - 250  Donate-coins ü™ô
ü§ç | –ë–û–ì - 300 Donate-coins ü™ô
ü§é | –í–õ–ê–°–¢–ï–õ–ò–ù - 350 Donate-coins ü™ô

üõí –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é , –≤–∏–±–µ—Ä–∏—Ç–µ –µ—ë –Ω–∏–∂–µ
‚ÑπÔ∏è –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π , –≤–∏–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –Ω–∏–∂–µ   
    """, reply_markup=privilegii_inline,  parse_mode='html')


async def vip_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])



    vip_menu = InlineKeyboardMarkup(row_width=1)
    cash_vip = InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å', callback_data='cash_vip')
    
    vip_menu.add(cash_vip)
    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –í–ò–ü ‚ù§Ô∏è

üõí | –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –í–ò–ü
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –í–ò–ü
        3Ô∏è‚É£ | 250.000$

üéÅ | –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Donate-Case:
       1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –í–ò–ü
       2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –í–ò–ü

üõí –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é , –≤–∏–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å –Ω–∏–∂–µ
    """, reply_markup=vip_menu,  parse_mode='html')



async def cash_vip_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    pref = cursor.execute("SELECT pref from users where user_id = ?",(callback.from_user.id,)).fetchone()
    pref = pref[0]
    
    balance = cursor.execute("SELECT balance from users where user_id = ?",(callback.from_user.id,)).fetchone()
    balance = int(balance[0])
    
    rating = cursor.execute("SELECT rating from users where user_id = ?",(callback.from_user.id,)).fetchone()
    rating = int(rating[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])
    
    if donate_coins >= 10:
       await callback.message.answer( f"‚úÖ | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –í–ò–ü", parse_mode='html' )
       cursor.execute(f'UPDATE users SET user_status = "Vip" where user_id = {user_id}')
       cursor.execute(f'UPDATE users SET rating = {rating + 100} where user_id = {user_id}')
       cursor.execute(f'UPDATE users SET balance = {balance + 10000000000} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–í–ò–ü ‚ù§Ô∏è" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET donate_coins = {donate_coins - 10} WHERE user_id = {user_id}') 
       connect.commit()
    else:
       await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –æ—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç Donate-coins", parse_mode='html' )



async def premium_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])



    premium_menu = InlineKeyboardMarkup(row_width=1)
    cash_premium = InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å', callback_data='cash_premium')
    
    premium_menu.add(cash_premium)
    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –ü–†–ï–ú–ò–£–ú üß°

üõí | –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –ü–†–ï–ú–ò–£–ú
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –ü–†–ï–ú–ò–£–ú
        3Ô∏è‚É£ | 300.000$

üéÅ | –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Donate-Case:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –ü–†–ï–ú–ò–£–ú
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –ü–†–ï–ú–ò–£–ú

üõí –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é , –≤–∏–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å –Ω–∏–∂–µ
    """, reply_markup=premium_menu,  parse_mode='html')



async def cash_premium_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    pref = cursor.execute("SELECT pref from users where user_id = ?",(callback.from_user.id,)).fetchone()
    pref = pref[0]
    
    balance = cursor.execute("SELECT balance from users where user_id = ?",(callback.from_user.id,)).fetchone()
    balance = int(balance[0])
    
    rating = cursor.execute("SELECT rating from users where user_id = ?",(callback.from_user.id,)).fetchone()
    rating = int(rating[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])
    
    if donate_coins >= 30:
       await callback.message.answer( f"‚úÖ | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –ü–†–ï–ú–ò–£–ú", parse_mode='html' )
       cursor.execute(f'UPDATE users SET user_status = "Premium" where user_id = {user_id}')
       cursor.execute(f'UPDATE users SET rating = {rating + 300} where user_id = {user_id}')
       cursor.execute(f'UPDATE users SET balance = {balance + 100000000000} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–ü–†–ï–ú–ò–£–ú üß°" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET donate_coins = {donate_coins - 30} WHERE user_id = {user_id}') 
       connect.commit()
    else:
       await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –æ—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç Donate-coins", parse_mode='html' )



async def platina_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])



    platina_menu = InlineKeyboardMarkup(row_width=1)
    cash_platina = InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å', callback_data='cash_platina')
    
    platina_menu.add(cash_platina)
    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –ü–õ–ê–¢–ò–ù–ê üíõ

üõí | –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –ü–õ–ê–¢–ò–ù–ê
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –ü–õ–ê–¢–ò–ù–ê
        3Ô∏è‚É£ | 550.000$
        4Ô∏è‚É£ | 10 –†–µ–π—Ç–∏–Ω–≥–∞
        5Ô∏è‚É£ | Money-case 1 —à—Ç.

üéÅ | –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Donate-Case:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –ü–õ–ê–¢–ò–ù–ê
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –ü–õ–ê–¢–ò–ù–ê

üõí –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é , –≤–∏–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å –Ω–∏–∂–µ
    """, reply_markup=platina_menu,  parse_mode='html')




async def cash_platina_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    pref = cursor.execute("SELECT pref from users where user_id = ?",(callback.from_user.id,)).fetchone()
    pref = pref[0]
    
    
    case_money = cursor.execute("SELECT case_money from user_case where user_id = ?",(callback.from_user.id,)).fetchone()
    case_money = int(case_money[0])
    
    balance = cursor.execute("SELECT balance from users where user_id = ?",(callback.from_user.id,)).fetchone()
    balance = int(balance[0])
    
    rating = cursor.execute("SELECT rating from users where user_id = ?",(callback.from_user.id,)).fetchone()
    rating = int(rating[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])
    
    if donate_coins >= 50:
       await callback.message.answer( f"‚úÖ | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –ü–õ–ê–¢–ò–ù–ê", parse_mode='html' )
       cursor.execute(f'UPDATE users SET user_status = "Platina" where user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_money = {case_money + 1} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET rating = {rating + 800} where user_id = {user_id}')
       cursor.execute(f'UPDATE users SET balance = {balance + 400000000000} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–ü–õ–ê–¢–ò–ù–ê üíõ" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET donate_coins = {donate_coins - 50} WHERE user_id = {user_id}') 
       connect.commit()
    else:
       await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –æ—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç Donate-coins", parse_mode='html' )



async def helper_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])



    helper_menu = InlineKeyboardMarkup(row_width=1)
    cash_helper = InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å', callback_data='cash_helper')
    
    helper_menu.add(cash_helper)
    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –•–ï–õ–ü–ï–† üíö

üõí | –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –•–ï–õ–ü–ï–†
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –•–ï–õ–ü–ï–†
        3Ô∏è‚É£ | 750.000$
        4Ô∏è‚É£ | 20 –†–µ–π—Ç–∏–Ω–≥–∞
        5Ô∏è‚É£ | Money-case 3 —à—Ç.
        6Ô∏è‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å —Å–µ–±–µ –ø—Ä–µ—Ñ–∏–∫—Å

üéÅ | –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Donate-Case:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –•–ï–õ–ü–ï–†
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –•–ï–õ–ü–ï–†
        3‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å —Å–µ–±–µ –ø—Ä–µ—Ñ–∏–∫—Å

üõí –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é , –≤–∏–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å –Ω–∏–∂–µ
    """, reply_markup=helper_menu,  parse_mode='html')



async def cash_helper_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    pref = cursor.execute("SELECT pref from users where user_id = ?",(callback.from_user.id,)).fetchone()
    pref = pref[0]
    
    
    case_money = cursor.execute("SELECT case_money from user_case where user_id = ?",(callback.from_user.id,)).fetchone()
    case_money = int(case_money[0])
    
    balance = cursor.execute("SELECT balance from users where user_id = ?",(callback.from_user.id,)).fetchone()
    balance = int(balance[0])
    
    rating = cursor.execute("SELECT rating from users where user_id = ?",(callback.from_user.id,)).fetchone()
    rating = int(rating[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])
    
    if donate_coins >= 100:
       await callback.message.answer( f"‚úÖ | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –•–ï–õ–ü–ï–†", parse_mode='html' )
       cursor.execute(f'UPDATE users SET user_status = "Helper" where user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_money = {case_money + 3} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET rating = {rating + 1300} where user_id = {user_id}')
       cursor.execute(f'UPDATE users SET balance = {balance + 700000000000} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–•–ï–õ–ü–ï–† üíö" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET donate_coins = {donate_coins - 100} WHERE user_id = {user_id}') 
       connect.commit()
    else:
       await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –æ—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç Donate-coins", parse_mode='html' )



async def sponsor_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])



    sponsor_menu = InlineKeyboardMarkup(row_width=1)
    cash_sponsor = InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å', callback_data='cash_sponsor')
    
    sponsor_menu.add(cash_sponsor)
    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –°–ü–û–ù–°–û–† üíô

üõí | –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –°–ü–û–ù–°–û–†
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –°–ü–û–ù–°–û–†
        3Ô∏è‚É£ | 3.000.000$
        4Ô∏è‚É£ | 25 –†–µ–π—Ç–∏–Ω–≥–∞
        5Ô∏è‚É£ | Money-case 5 —à—Ç.
        6Ô∏è‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å —Å–µ–±–µ –ø—Ä–µ—Ñ–∏–∫—Å

üéÅ | –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Donate-Case:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –°–ü–û–ù–°–û–†
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –°–ü–û–ù–°–û–†
        3‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å —Å–µ–±–µ –ø—Ä–µ—Ñ–∏–∫—Å

üõí –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é , –≤–∏–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å –Ω–∏–∂–µ
    """, reply_markup=sponsor_menu,  parse_mode='html')




async def cash_sponsor_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    pref = cursor.execute("SELECT pref from users where user_id = ?",(callback.from_user.id,)).fetchone()
    pref = pref[0]
    
    
    case_money = cursor.execute("SELECT case_money from user_case where user_id = ?",(callback.from_user.id,)).fetchone()
    case_money = int(case_money[0])
    
    balance = cursor.execute("SELECT balance from users where user_id = ?",(callback.from_user.id,)).fetchone()
    balance = int(balance[0])
    
    rating = cursor.execute("SELECT rating from users where user_id = ?",(callback.from_user.id,)).fetchone()
    rating = int(rating[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])
    
    if donate_coins >= 155:
       await callback.message.answer( f"‚úÖ | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –°–ü–û–ù–°–û–†", parse_mode='html' )
       cursor.execute(f'UPDATE users SET user_status = "Sponsor" where user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_money = {case_money + 5} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET rating = {rating + 10000} where user_id = {user_id}')
       cursor.execute(f'UPDATE users SET balance = {balance + 5000000000000} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–°–ü–û–ù–°–û–† üíô" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET donate_coins = {donate_coins - 155} WHERE user_id = {user_id}') 
       connect.commit()
    else:
       await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –æ—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç Donate-coins", parse_mode='html' )



async def osnovatel_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])



    osnovatel_menu = InlineKeyboardMarkup(row_width=1)
    cash_osnovatel = InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å', callback_data='cash_osnovatel')
    
    osnovatel_menu.add(cash_osnovatel)
    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –û–°–ù–û–í–ê–¢–ï–õ–¨ üíú

üõí | –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –û–°–ù–û–í–ê–¢–ï–õ–¨
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –û–°–ù–û–í–ê–¢–ï–õ–¨
        3Ô∏è‚É£ | 4.000.000$
        4Ô∏è‚É£ | 54 –†–µ–π—Ç–∏–Ω–≥–∞
        5Ô∏è‚É£ | Money-case 5 —à—Ç.
        6Ô∏è‚É£ | Donate-case 1 —à—Ç.
        7Ô∏è‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å —Å–µ–±–µ –ø—Ä–µ—Ñ–∏–∫—Å

üéÅ | –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Donate-Case:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –û–°–ù–û–í–ê–¢–ï–õ–¨
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –û–°–ù–û–í–ê–¢–ï–õ–¨
        3‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å —Å–µ–±–µ –ø—Ä–µ—Ñ–∏–∫—Å

üõí –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é , –≤–∏–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å –Ω–∏–∂–µ
    """, reply_markup=osnovatel_menu,  parse_mode='html')



async def cash_osnovatel_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    pref = cursor.execute("SELECT pref from users where user_id = ?",(callback.from_user.id,)).fetchone()
    pref = pref[0]
    
    
    case_donate = cursor.execute("SELECT case_donate from user_case where user_id = ?",(callback.from_user.id,)).fetchone()
    case_donate = int(case_donate[0])
    
    case_money = cursor.execute("SELECT case_money from user_case where user_id = ?",(callback.from_user.id,)).fetchone()
    case_money = int(case_money[0])
    
    balance = cursor.execute("SELECT balance from users where user_id = ?",(callback.from_user.id,)).fetchone()
    balance = int(balance[0])
    
    rating = cursor.execute("SELECT rating from users where user_id = ?",(callback.from_user.id,)).fetchone()
    rating = int(rating[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])
    
    if donate_coins >= 170:
       await callback.message.answer( f"‚úÖ | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –û–°–ù–û–í–ê–¢–ï–õ–¨ ", parse_mode='html' )
       cursor.execute(f'UPDATE users SET user_status = "Osnovatel" where user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_money = {case_money + 5} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_donate = {case_donate + 1} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET rating = {rating + 100000} where user_id = {user_id}')
       cursor.execute(f'UPDATE users SET balance = {balance + 20000000000000} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–û–°–ù–û–í–ê–¢–ï–õ–¨ üíú" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET donate_coins = {donate_coins - 170} WHERE user_id = {user_id}') 
       connect.commit()
    else:
       await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –æ—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç Donate-coins", parse_mode='html' )



async def vladelec_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])



    vladelec_menu = InlineKeyboardMarkup(row_width=1)
    cash_vladelec = InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å', callback_data='cash_vladelec')
    
    vladelec_menu.add(cash_vladelec)
    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> ,  –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –í–õ–ê–î–ï–õ–ï–¶ üñ§

üõí | –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –í–õ–ê–î–ï–õ–ï–¶
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –í–õ–ê–î–ï–õ–ï–¶
        3Ô∏è‚É£ | 10.000.000$
        4Ô∏è‚É£ | 74 –†–µ–π—Ç–∏–Ω–≥–∞
        5Ô∏è‚É£ | Money-case 5 —à—Ç.
        6Ô∏è‚É£ | Donate-case 1 —à—Ç.
        7Ô∏è‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å —Å–µ–±–µ –ø—Ä–µ—Ñ–∏–∫—Å
        8Ô∏è‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å –∏–≥—Ä–æ–∫–∞–º –ø—Ä–µ—Ñ–∏–∫—Å

üéÅ | –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Donate-Case:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –í–õ–ê–î–ï–õ–ï–¶
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –í–õ–ê–î–ï–õ–ï–¶
        3‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å —Å–µ–±–µ –ø—Ä–µ—Ñ–∏–∫—Å
        4‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å –∏–≥—Ä–æ–∫–∞–º –ø—Ä–µ—Ñ–∏–∫—Å

üõí –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é , –≤–∏–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å –Ω–∏–∂–µ
    """, reply_markup=vladelec_menu,  parse_mode='html')




async def cash_vladelec_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    pref = cursor.execute("SELECT pref from users where user_id = ?",(callback.from_user.id,)).fetchone()
    pref = pref[0]
    
    case_donate = cursor.execute("SELECT case_donate from user_case where user_id = ?",(callback.from_user.id,)).fetchone()
    case_donate = int(case_donate[0])

    case_money = cursor.execute("SELECT case_money from user_case where user_id = ?",(callback.from_user.id,)).fetchone()
    case_money = int(case_money[0])
    
    balance = cursor.execute("SELECT balance from users where user_id = ?",(callback.from_user.id,)).fetchone()
    balance = int(balance[0])
    
    rating = cursor.execute("SELECT rating from users where user_id = ?",(callback.from_user.id,)).fetchone()
    rating = int(rating[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])
    
    if donate_coins >= 250:
       await callback.message.answer( f"‚úÖ | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –í–õ–ê–î–ï–õ–ï–¶  ", parse_mode='html' )
       cursor.execute(f'UPDATE users SET user_status = "Vladelec" where user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_money = {case_money + 5} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_donate = {case_donate + 1} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET rating = {rating + 1000000} where user_id = {user_id}')
       cursor.execute(f'UPDATE users SET balance = {balance + 100000000000000} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–í–õ–ê–î–ï–õ–ï–¶ üñ§" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET donate_coins = {donate_coins - 250} WHERE user_id = {user_id}') 
       connect.commit()
    else:
       await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –æ—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç Donate-coins", parse_mode='html' )



async def bog_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])



    bog_menu = InlineKeyboardMarkup(row_width=1)
    cash_bog = InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å', callback_data='cash_bog')
    
    bog_menu.add(cash_bog)
    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –ë–û–ì ü§ç

üõí | –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –ë–û–ì
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –ë–û–ì
        3Ô∏è‚É£ | 25.000.000$
        4Ô∏è‚É£ | 100 –†–µ–π—Ç–∏–Ω–≥–∞
        5Ô∏è‚É£ | Money-case 5 —à—Ç.
        6Ô∏è‚É£ | Donate-case 1 —à—Ç.
        7Ô∏è‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å —Å–µ–±–µ –ø—Ä–µ—Ñ–∏–∫—Å
        8Ô∏è‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å –∏–≥—Ä–æ–∫–∞–º –ø—Ä–µ—Ñ–∏–∫—Å
        9Ô∏è‚É£ | –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è –≤ –∏–≥—Ä–∞—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è 2 —Å–µ–∫—É–Ω–¥—ã

üéÅ | –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Donate-Case:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –ë–û–ì
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –ë–û–ì
        3‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å —Å–µ–±–µ –ø—Ä–µ—Ñ–∏–∫—Å
        4‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å –∏–≥—Ä–æ–∫–∞–º –ø—Ä–µ—Ñ–∏–∫—Å
        5‚É£ | –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è –≤ –∏–≥—Ä–∞—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è 2 —Å–µ–∫—É–Ω–¥—ã

üõí –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é , –≤–∏–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å –Ω–∏–∂–µ
    """, reply_markup=bog_menu,  parse_mode='html')



async def cash_bog_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    pref = cursor.execute("SELECT pref from users where user_id = ?",(callback.from_user.id,)).fetchone()
    pref = pref[0]
    
    case_donate = cursor.execute("SELECT case_donate from user_case where user_id = ?",(callback.from_user.id,)).fetchone()
    case_donate = int(case_donate[0])

    case_money = cursor.execute("SELECT case_money from user_case where user_id = ?",(callback.from_user.id,)).fetchone()
    case_money = int(case_money[0])
    
    balance = cursor.execute("SELECT balance from users where user_id = ?",(callback.from_user.id,)).fetchone()
    balance = int(balance[0])
    
    rating = cursor.execute("SELECT rating from users where user_id = ?",(callback.from_user.id,)).fetchone()
    rating = int(rating[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])
    
    if donate_coins >= 300:
       await callback.message.answer( f"‚úÖ | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –ë–û–ì", parse_mode='html' )
       cursor.execute(f'UPDATE users SET user_status = "Bog" where user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_money = {case_money + 5} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_donate = {case_donate + 1} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET rating = {rating + 10000000} where user_id = {user_id}')
       cursor.execute(f'UPDATE users SET balance = {balance + 500000000000000} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–ë–û–ì ü§ç" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET donate_coins = {donate_coins - 300} WHERE user_id = {user_id}') 
       connect.commit()
    else:
       await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –æ—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç Donate-coins", parse_mode='html' )



async def vlastelin_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])



    vlaselin_menu = InlineKeyboardMarkup(row_width=1)
    cash_vlaselin = InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å', callback_data='cash_vlaselin')
    
    vlaselin_menu.add(cash_vlaselin)
    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a> , –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –í–õ–ê–°–¢–ï–õ–ò–ù ü§é

üõí | –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –í–õ–ê–°–¢–ï–õ–ò–ù
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –í–õ–ê–°–¢–ï–õ–ò–ù
        3Ô∏è‚É£ | 50.000.000$
        4Ô∏è‚É£ | 150 –†–µ–π—Ç–∏–Ω–≥–∞
        5Ô∏è‚É£ | Money-case 5 —à—Ç.
        6Ô∏è‚É£ | Donate-case 1 —à—Ç.
        7Ô∏è‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å —Å–µ–±–µ –ø—Ä–µ—Ñ–∏–∫—Å
        8Ô∏è‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å –∏–≥—Ä–æ–∫–∞–º –ø—Ä–µ—Ñ–∏–∫—Å
        9Ô∏è‚É£ | –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è –≤ –∏–≥—Ä–∞—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è 2 —Å–µ–∫—É–Ω–¥—ã

üéÅ | –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Donate-Case:
        1Ô∏è‚É£ | –ë–æ–Ω—É—Å-–∫–∏—Ç –í–õ–ê–°–¢–ï–õ–ò–ù
        2Ô∏è‚É£ | –ü—Ä–µ—Ñ–∏–∫—Å –í–õ–ê–°–¢–ï–õ–ò–ù
        3‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å —Å–µ–±–µ –ø—Ä–µ—Ñ–∏–∫—Å
        4‚É£ | –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å –∏–≥—Ä–æ–∫–∞–º –ø—Ä–µ—Ñ–∏–∫—Å
        5‚É£ | –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è –≤ –∏–≥—Ä–∞—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è 2 —Å–µ–∫—É–Ω–¥—ã

üõí –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é , –≤–∏–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å –Ω–∏–∂–µ
    """, reply_markup=vlaselin_menu,  parse_mode='html')



async def cash_vlastelin_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    pref = cursor.execute("SELECT pref from users where user_id = ?",(callback.from_user.id,)).fetchone()
    pref = pref[0]
    
    case_donate = cursor.execute("SELECT case_donate from user_case where user_id = ?",(callback.from_user.id,)).fetchone()
    case_donate = int(case_donate[0])

    case_money = cursor.execute("SELECT case_money from user_case where user_id = ?",(callback.from_user.id,)).fetchone()
    case_money = int(case_money[0])
    
    balance = cursor.execute("SELECT balance from users where user_id = ?",(callback.from_user.id,)).fetchone()
    balance = int(balance[0])
    
    rating = cursor.execute("SELECT rating from users where user_id = ?",(callback.from_user.id,)).fetchone()
    rating = int(rating[0])

    donate_coins = cursor.execute("SELECT donate_coins from users where user_id = ?",(callback.from_user.id,)).fetchone()
    donate_coins = int(donate_coins[0])
    
    if donate_coins >= 300:
       await callback.message.answer( f"‚úÖ | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –í–õ–ê–°–¢–ï–õ–ò–ù ", parse_mode='html' )
       cursor.execute(f'UPDATE users SET user_status = "Vlaselin" where user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_money = {case_money + 5} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE user_case SET case_donate = {case_donate + 1} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET rating = {rating + 10000000} where user_id = {user_id}')
       cursor.execute(f'UPDATE users SET balance = {balance + 500000000000000} WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET pref = "–í–õ–ê–°–¢–ï–õ–ò–ù ü§é" WHERE user_id = {user_id}')
       cursor.execute(f'UPDATE users SET donate_coins = {donate_coins - 300} WHERE user_id = {user_id}') 
       connect.commit()
    else:
       await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –æ—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç Donate-coins", parse_mode='html' )



async def adms_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    admins_menu_cash = InlineKeyboardMarkup(row_width=2)
    admins_cash = InlineKeyboardButton(text='‚õîÔ∏è ADMIN', callback_data='admins_cash')
    helper_admins_cash = InlineKeyboardButton(text='‚õîÔ∏è HELPER-ADMIN', callback_data='helper_admins_cash')
    owner_cash = InlineKeyboardButton(text='‚õîÔ∏è OWNER', callback_data='owner_cash')
    admins_menu_cash.add(admins_cash, helper_admins_cash, owner_cash)
    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å—Ç–∞—Ç—É—Å—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤‚õîÔ∏è

1Ô∏è‚É£ | ADMIN - 400–†
4Ô∏è‚É£ | HELPER-ADMIN - 1.500–†
5Ô∏è‚É£ | OWNER - 5.000–†

‚ÜòÔ∏è –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ , –≤–∏–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–∏–∂–µ   
    """,reply_markup=admins_menu_cash,  parse_mode='html' )
  


async def admins_cash_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ ADMIN ‚õîÔ∏è

1Ô∏è‚É£ | –í—ã–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã
2Ô∏è‚É£ | –û—Ç–±–æ—Ä –≤–∞–ª—é—Ç—ã
3Ô∏è‚É£ | –£–º–Ω–æ–∂–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
4Ô∏è‚É£ | –û–±–Ω—É–ª–µ–Ω–∏–µ
5Ô∏è‚É£ | –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞
6Ô∏è‚É£ | –ü–æ–¥–µ–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å
7Ô∏è‚É£ | –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç–æ–≤ 

üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ , –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –í–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ - <a href='t.me/bs_bro5/'>RedSharkQ</a> 
    """,  parse_mode='html' )


async def helper_admins_cash_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ HELPER-ADMIN ‚õîÔ∏è

1Ô∏è‚É£ | –í—ã–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã
2Ô∏è‚É£ | –û—Ç–±–æ—Ä –≤–∞–ª—é—Ç—ã
3Ô∏è‚É£ | –£–º–Ω–æ–∂–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
4Ô∏è‚É£ | –û–±–Ω—É–ª–µ–Ω–∏–µ
5Ô∏è‚É£ | –í—ã–¥–∞—á–∞ –±–∞–Ω–∞
6Ô∏è‚É£ | –í—ã–¥–∞—á–∞ —Ä–∞–∑–±–∞–Ω–∞
7Ô∏è‚É£ | –ü–æ–¥–µ–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å
8Ô∏è‚É£ | –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–∞ 
9Ô∏è‚É£ | –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ ID 
üîü | –í—ã–¥–∞—á–∞ –≤–∞—Ä–Ω–∞ 
1Ô∏è‚É£1Ô∏è‚É£ | –û—Ç–±–æ—Ä –≤–∞—Ä–Ω–∞
1Ô∏è‚É£2Ô∏è‚É£ | –í—ã–¥–∞—á–∞ –±–∞–Ω–∞ –ø–æ ID
1Ô∏è‚É£3Ô∏è‚É£ | –í—ã–¥–∞—á–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ ID
1Ô∏è‚É£4Ô∏è‚É£ | –í—ã–¥–∞—á–∞ –≤–∞—Ä–Ω–∞ –ø–æ ID
1Ô∏è‚É£5Ô∏è‚É£ | –û—Ç–±–æ—Ä –≤–∞—Ä–Ω–∞ –ø–æ ID
1Ô∏è‚É£6Ô∏è‚É£ | –û–±–Ω—É–ª–µ–Ω–∏–µ –ø–æ ID
1Ô∏è‚É£7Ô∏è‚É£ | –î–û–°–¢–£–ü –ö –ö–û–ù–°–û–õ–ò –ë–û–¢–ê
1Ô∏è‚É£8Ô∏è‚É£ | –î–û–°–¢–£–ü –ö –†–ï–ü–û–†–¢–ê–ú
1Ô∏è‚É£9Ô∏è‚É£ | –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç–æ–≤ 

üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ , –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –í–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ - <a href='t.me/bs_bro5/'>RedSharkQ</a> 
    """,  parse_mode='html' )



async def owner_cash_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    await callback.message.answer( f"""
<a href='tg://user?id={user_id}'>{user_name}</a>, –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ OWNER ‚õîÔ∏è

1Ô∏è‚É£ | –í—ã–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã
2Ô∏è‚É£ | –û—Ç–±–æ—Ä –≤–∞–ª—é—Ç—ã
3Ô∏è‚É£ | –£–º–Ω–æ–∂–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
4Ô∏è‚É£ | –û–±–Ω—É–ª–µ–Ω–∏–µ
5Ô∏è‚É£ | –í—ã–¥–∞—á–∞ –±–∞–Ω–∞
6Ô∏è‚É£ | –í—ã–¥–∞—á–∞ —Ä–∞–∑–±–∞–Ω–∞
7Ô∏è‚É£ |–ü–æ–¥–µ–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å
8Ô∏è‚É£ | –í—ã–¥–∞—á–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ "ADMIN"
9Ô∏è‚É£ | –í—ã–¥–∞—á–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ "HELPER-ADMIN"
üîü | –í—ã–¥–∞—á–∞ Donate-Coins
1Ô∏è‚É£1Ô∏è‚É£ | –ú–ê–°–°–û–í–û–ï –û–ë–ù–£–õ–ï–ù–ò–ï
1Ô∏è‚É£2Ô∏è‚É£ | –í—ã–¥–∞—á–∞ –±–∞–Ω–∞ –ø–æ ID
1Ô∏è‚É£3Ô∏è‚É£ | –í—ã–¥–∞—á–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ ID
1Ô∏è‚É£4Ô∏è‚É£ | –í—ã–¥–∞—á–∞ –≤–∞—Ä–Ω–∞
1Ô∏è‚É£5Ô∏è‚É£ | –û—Ç–±–æ—Ä –≤–∞—Ä–Ω–∞ 
1Ô∏è‚É£6Ô∏è‚É£ | –í—ã–¥–∞—á–∞ –≤–∞—Ä–Ω–∞ –ø–æ ID
1Ô∏è‚É£7Ô∏è‚É£ | –û—Ç–±–æ—Ä –≤–∞—Ä–Ω–∞ –ø–æ ID
1Ô∏è‚É£8Ô∏è‚É£ | –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
1Ô∏è‚É£9Ô∏è‚É£ | –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ –ø–æ ID
2Ô∏è‚É£0Ô∏è‚É£ | –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ "OWNER"
2Ô∏è‚É£1Ô∏è‚É£ | –î–û–°–¢–£–ü –ö –ö–û–ù–°–û–õ–ò –ë–û–¢–ê
2Ô∏è‚É£2Ô∏è‚É£ | –î–û–°–¢–£–ü –ö –†–ï–ü–û–†–¢–ê–ú
2Ô∏è‚É£3Ô∏è‚É£ | –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –£–î–ê–õ–Ø–¢–¨ –ò–ì–†–û–ö–û–í –° –ë–ê–ó–´ –î–ê–ù–ù–´–•
2Ô∏è‚É£4Ô∏è‚É£ | –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç–æ–≤

üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ , –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –í–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ - <a href="t.me/bs_bro5/'>RedSharkQ</a>
    """,  parse_mode='html' )



async def channel_proverk_callback(callback: types.CallbackQuery):
   user_id = callback.from_user.id
   user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
   user_name = str(user_name[0])

   balance = cursor.execute("SELECT balance from users where user_id = ?",(callback.from_user.id,)).fetchone()
   balance = int(balance[0])
   user_channel_status = await bot.get_chat_member(chat_id="@qwechannel", user_id=callback.from_user.id)

   channel_pov = cursor.execute("SELECT members from channel_pov where user_id = ?", (callback.from_user.id,)).fetchone()
   channel_pov = int(channel_pov[0])

   if channel_pov > 0:
      await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–µ–Ω—å–≥–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É", parse_mode='html')
      return

   if user_channel_status['status'] != 'left':
      await callback.message.answer( f"<a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ‚úÖ", parse_mode='html')
      await callback.message.answer( f"üí∏ | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–∑ –≤ —Ä–∞–∑–º–µ—Ä–µ  500.000.000.000.000.000$", parse_mode='html')
      cursor.execute(f'UPDATE channel_pov SET members = {1} WHERE user_id = {user_id}')
      cursor.execute(f'UPDATE users SET balance = {balance + 500000000000000000} WHERE user_id = {user_id}')
      connect.commit()
   else:
      await callback.message.answer( f"‚ùå | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode='html')



async def ava_strach_callback(callback: types.CallbackQuery):
   user_id = callback.from_user.id
   user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
   user_name = str(user_name[0])

   await callback.message.answer( f"üñº | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫—É \"–°–¢–†–ê–ñ\"", parse_mode='html')
   cursor.execute(f'UPDATE avatarka SET avatarka = "strach" WHERE user_id = {user_id}')
   connect.commit()


async def ava_cheat_callback(callback: types.CallbackQuery):
   user_id = callback.from_user.id
   user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
   user_name = str(user_name[0])

   await callback.message.answer( f"üñº | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫—É \"–ß–ò–¢–ï–†\"", parse_mode='html')
   cursor.execute(f'UPDATE avatarka SET avatarka = "cheat" WHERE user_id = {user_id}')
   connect.commit()



async def ava_apper_callback(callback: types.CallbackQuery):
   user_id = callback.from_user.id
   user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
   user_name = str(user_name[0])

   await callback.message.answer( f"üñº | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫—É \"–ê–ü–ü–ï–†\"", parse_mode='html')
   cursor.execute(f'UPDATE avatarka SET avatarka = "apper" WHERE user_id = {user_id}')
   connect.commit()



async def ava_dyp_callback(callback: types.CallbackQuery):
   user_id = callback.from_user.id
   user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
   user_name = str(user_name[0])

   await callback.message.answer( f"üñº | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫—É \"–î–Æ–ü–ü–ï–†\"", parse_mode='html')
   cursor.execute(f'UPDATE avatarka SET avatarka = "dyp" WHERE user_id = {user_id}')
   connect.commit()



async def ava_girl_callback(callback: types.CallbackQuery):
   user_id = callback.from_user.id
   user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
   user_name = str(user_name[0])

   await callback.message.answer( f"üñº | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫—É \"–î–ï–í–£–®–ö–ê\"", parse_mode='html')
   cursor.execute(f'UPDATE avatarka SET avatarka = "girl" WHERE user_id = {user_id}')
   connect.commit()


async def ava_admin_callback(callback: types.CallbackQuery):
   user_id = callback.from_user.id
   user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
   user_name = str(user_name[0])

   user_status = cursor.execute("SELECT user_status from users where user_id = ?",(callback.from_user.id,)).fetchone()
   user_status = str(user_status[0])

   if user_status in ['Admin', 'Helper_Admin', 'Owner']:
      await callback.message.answer( f"üñº | <a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫—É \"–ê–î–ú–ò–ù\"", parse_mode='html')
      cursor.execute(f'UPDATE avatarka SET avatarka = "admin" WHERE user_id = {user_id}')
      connect.commit()
      return
   else:
      await callback.message.answer( f"<a href='tg://user?id={user_id}'>{user_name}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ üëÆ. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É <a href='t.me/bs_bro5/'>RedSharkQ</a>  ‚ö†Ô∏è", parse_mode='html')



async def gamevb_callback(callback: types.CallbackQuery):
   user_id = callback.from_user.id
   user_name = cursor.execute("SELECT user_name from users where user_id = ?",(callback.from_user.id,)).fetchone()
   user_name = str(user_name[0])

   balance = cursor.execute("SELECT balance from users where user_id = ?",(callback.from_user.id,)).fetchone()
   balance = int(balance[0])

   game = cursor.execute("SELECT game from users where user_id = ?",(callback.from_user.id,)).fetchone()
   game = int(game[0])

   balance2 = '{:,}'.format(balance).replace(',', '.')


   rx = random.randint(0, 5000)

   period = 5
   get = cursor.execute("SELECT stavka_games FROM bot_time WHERE user_id = ?", (callback.from_user.id,)).fetchone()
   last_stavka = f"{int(get[0])}"
   stavkatime = time.time() - float(last_stavka)
   if stavkatime > period:
      if balance > 0:
         if int(rx) in range(0, 7000):
            i = balance - balance * 0
            i2 = int(i)
            i3 = '{:,}'.format(i2).replace(',', '.')
            await callback.message.answer(  f"""‚ò† ‚Ä¢ <a href='tg://user?id={user_id}'>{user_name}</a> , –≤—ã —Å—ã–≥—Ä–∞–ª–∏ –Ω–∞ –≤—Å–µ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏ –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤—Å–µ üòî""", parse_mode='html')
            cursor.execute(f'UPDATE users SET balance = {balance - i2} WHERE user_id = {user_id}')
            cursor.execute(f'UPDATE bot_time SET stavka_games = {time.time()} WHERE user_id = {user_id}')
            cursor.execute(f'UPDATE users SET game = {game + 1} WHERE user_id = {user_id}')
            connect.commit()
            return
         if int(rx) in range(5001, 10000):
            i = balance * 2
            i2 = int(i)
            i3 = '{:,}'.format(i2).replace(',', '.')
            await callback.message.answer( f"""‚ò† ‚Ä¢ <a href='tg://user?id={user_id}'>{user_name}</a> , –≤—ã —Å—ã–≥—Ä–∞–ª–∏ –Ω–∞ –≤—Å–µ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ –•2: {i3} üò±üò±""", parse_mode='html')
            cursor.execute(f'UPDATE users SET balance = {balance + i2} WHERE user_id = {user_id}')
            cursor.execute(f'UPDATE bot_time SET stavka_games = {time.time()} WHERE user_id = {user_id}')
            cursor.execute(f'UPDATE users SET game = {game + 1} WHERE user_id = {user_id}')
            connect.commit()
            return
      else:
         await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –æ—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! ", parse_mode='html')
   else:
      await callback.message.answer( f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a>, –∏–≥—Ä–∞—Ç—å –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥", parse_mode='html')         




